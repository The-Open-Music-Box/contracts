/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UploadsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_UploadsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_UploadsApi_H_



#include "TombContracts/ApiClient.h"

#include "TombContracts/model/CleanupStaleSessions_200_response.h"
#include "TombContracts/model/FinalizeUpload_200_response.h"
#include "TombContracts/model/FinalizeUpload_request.h"
#include "TombContracts/model/GetUploadStatus_200_response.h"
#include "TombContracts/HttpContent.h"
#include "TombContracts/model/InitUploadSession_201_response.h"
#include "TombContracts/model/InitUploadSession_request.h"
#include "TombContracts/model/ListUploadSessions_200_response.h"
#include "TombContracts/model/UnifiedResponse.h"
#include "TombContracts/model/UploadChunk_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class TOMB_API UploadsApi 
{
public:

    explicit UploadsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~UploadsApi();

    /// <summary>
    /// Cleanup stale upload sessions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="maxAgeHours">Maximum age in hours for cleanup (optional, default to 0)</param>
    pplx::task<std::shared_ptr<CleanupStaleSessions_200_response>> cleanupStaleSessions(
        boost::optional<int32_t> maxAgeHours
    ) const;
    /// <summary>
    /// Delete upload session
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="sessionId"></param>
    pplx::task<std::shared_ptr<UnifiedResponse>> deleteUploadSession(
        utility::string_t sessionId
    ) const;
    /// <summary>
    /// Finalize upload and add track to playlist
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="sessionId"></param>
    /// <param name="finalizeUploadRequest"> (optional)</param>
    pplx::task<std::shared_ptr<FinalizeUpload_200_response>> finalizeUpload(
        utility::string_t playlistId,
        utility::string_t sessionId,
        boost::optional<std::shared_ptr<FinalizeUpload_request>> finalizeUploadRequest
    ) const;
    /// <summary>
    /// Get upload session status
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="sessionId"></param>
    pplx::task<std::shared_ptr<GetUploadStatus_200_response>> getUploadStatus(
        utility::string_t playlistId,
        utility::string_t sessionId
    ) const;
    /// <summary>
    /// Initialize chunked upload session
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="initUploadSessionRequest"></param>
    pplx::task<std::shared_ptr<InitUploadSession_201_response>> initUploadSession(
        utility::string_t playlistId,
        std::shared_ptr<InitUploadSession_request> initUploadSessionRequest
    ) const;
    /// <summary>
    /// List all upload sessions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="status">Filter by upload status (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Maximum sessions to return (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ListUploadSessions_200_response>> listUploadSessions(
        boost::optional<utility::string_t> status,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Upload a file chunk
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="sessionId"></param>
    /// <param name="chunkIndex"></param>
    /// <param name="body"></param>
    pplx::task<std::shared_ptr<UploadChunk_200_response>> uploadChunk(
        utility::string_t playlistId,
        utility::string_t sessionId,
        int32_t chunkIndex,
        std::shared_ptr<HttpContent> body
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_UploadsApi_H_ */

