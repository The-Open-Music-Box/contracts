/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PlaylistsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_PlaylistsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_PlaylistsApi_H_



#include "TombContracts/ApiClient.h"

#include "TombContracts/model/CreatePlaylist_201_response.h"
#include "TombContracts/model/CreatePlaylist_request.h"
#include "TombContracts/model/FinalizeUpload_200_response.h"
#include "TombContracts/model/FinalizeUpload_request.h"
#include "TombContracts/model/GetUploadStatus_200_response.h"
#include "TombContracts/HttpContent.h"
#include "TombContracts/model/InitUploadSession_201_response.h"
#include "TombContracts/model/InitUploadSession_request.h"
#include "TombContracts/model/ListPlaylists_200_response.h"
#include "TombContracts/model/MoveTrack_request.h"
#include "TombContracts/model/PlayerPlay_request.h"
#include "TombContracts/model/RemoveTracksFromPlaylist_request.h"
#include "TombContracts/model/ReorderPlaylist_request.h"
#include "TombContracts/model/StartPlaylist_200_response.h"
#include "TombContracts/model/SyncPlaylists_200_response.h"
#include "TombContracts/model/SyncPlaylists_request.h"
#include "TombContracts/model/UnifiedResponse.h"
#include "TombContracts/model/UpdatePlaylist_200_response.h"
#include "TombContracts/model/UpdatePlaylist_request.h"
#include "TombContracts/model/UploadChunk_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class TOMB_API PlaylistsApi 
{
public:

    explicit PlaylistsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~PlaylistsApi();

    /// <summary>
    /// Create new playlist
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createPlaylistRequest"></param>
    pplx::task<std::shared_ptr<CreatePlaylist_201_response>> createPlaylist(
        std::shared_ptr<CreatePlaylist_request> createPlaylistRequest
    ) const;
    /// <summary>
    /// Delete playlist
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="playerPlayRequest"> (optional)</param>
    pplx::task<void> deletePlaylist(
        utility::string_t playlistId,
        boost::optional<std::shared_ptr<PlayerPlay_request>> playerPlayRequest
    ) const;
    /// <summary>
    /// Finalize upload and add track to playlist
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="sessionId"></param>
    /// <param name="finalizeUploadRequest"> (optional)</param>
    pplx::task<std::shared_ptr<FinalizeUpload_200_response>> finalizeUpload(
        utility::string_t playlistId,
        utility::string_t sessionId,
        boost::optional<std::shared_ptr<FinalizeUpload_request>> finalizeUploadRequest
    ) const;
    /// <summary>
    /// Get specific playlist
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    pplx::task<std::shared_ptr<CreatePlaylist_201_response>> getPlaylist(
        utility::string_t playlistId
    ) const;
    /// <summary>
    /// Get upload session status
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="sessionId"></param>
    pplx::task<std::shared_ptr<GetUploadStatus_200_response>> getUploadStatus(
        utility::string_t playlistId,
        utility::string_t sessionId
    ) const;
    /// <summary>
    /// Initialize chunked upload session
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="initUploadSessionRequest"></param>
    pplx::task<std::shared_ptr<InitUploadSession_201_response>> initUploadSession(
        utility::string_t playlistId,
        std::shared_ptr<InitUploadSession_request> initUploadSessionRequest
    ) const;
    /// <summary>
    /// List all playlists with pagination
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="limit"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ListPlaylists_200_response>> listPlaylists(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Move track between playlists
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="moveTrackRequest"></param>
    pplx::task<std::shared_ptr<UnifiedResponse>> moveTrack(
        std::shared_ptr<MoveTrack_request> moveTrackRequest
    ) const;
    /// <summary>
    /// Remove tracks from playlist
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="removeTracksFromPlaylistRequest"></param>
    pplx::task<std::shared_ptr<UnifiedResponse>> removeTracksFromPlaylist(
        utility::string_t playlistId,
        std::shared_ptr<RemoveTracksFromPlaylist_request> removeTracksFromPlaylistRequest
    ) const;
    /// <summary>
    /// Reorder tracks in playlist
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="reorderPlaylistRequest"></param>
    pplx::task<std::shared_ptr<UnifiedResponse>> reorderPlaylist(
        utility::string_t playlistId,
        std::shared_ptr<ReorderPlaylist_request> reorderPlaylistRequest
    ) const;
    /// <summary>
    /// Start playlist playback
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="playerPlayRequest"> (optional)</param>
    pplx::task<std::shared_ptr<StartPlaylist_200_response>> startPlaylist(
        utility::string_t playlistId,
        boost::optional<std::shared_ptr<PlayerPlay_request>> playerPlayRequest
    ) const;
    /// <summary>
    /// Sync playlist state
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="syncPlaylistsRequest"> (optional)</param>
    pplx::task<std::shared_ptr<SyncPlaylists_200_response>> syncPlaylists(
        boost::optional<std::shared_ptr<SyncPlaylists_request>> syncPlaylistsRequest
    ) const;
    /// <summary>
    /// Update playlist
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="updatePlaylistRequest"> (optional)</param>
    pplx::task<std::shared_ptr<UpdatePlaylist_200_response>> updatePlaylist(
        utility::string_t playlistId,
        boost::optional<std::shared_ptr<UpdatePlaylist_request>> updatePlaylistRequest
    ) const;
    /// <summary>
    /// Upload a file chunk
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playlistId"></param>
    /// <param name="sessionId"></param>
    /// <param name="chunkIndex"></param>
    /// <param name="body"></param>
    pplx::task<std::shared_ptr<UploadChunk_200_response>> uploadChunk(
        utility::string_t playlistId,
        utility::string_t sessionId,
        int32_t chunkIndex,
        std::shared_ptr<HttpContent> body
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_PlaylistsApi_H_ */

