/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PlaylistSummary.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PlaylistSummary_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PlaylistSummary_H_


#include "TombContracts/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class TOMB_API PlaylistSummary
    : public ModelBase
{
public:
    PlaylistSummary();
    virtual ~PlaylistSummary();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// PlaylistSummary members


    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(const utility::string_t& value);

    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();
    void setTitle(const utility::string_t& value);

    int32_t getTrackCount() const;
    bool trackCountIsSet() const;
    void unsetTrack_count();
    void setTrackCount(int32_t value);

    utility::string_t getNfcTagId() const;
    bool nfcTagIdIsSet() const;
    void unsetNfc_tag_id();
    void setNfcTagId(const utility::string_t& value);

    double getServerSeq() const;
    bool serverSeqIsSet() const;
    void unsetServer_seq();
    void setServerSeq(double value);

    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();
    void setCreatedAt(const utility::datetime& value);

    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdated_at();
    void setUpdatedAt(const utility::datetime& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;

    utility::string_t m_Title;
    bool m_TitleIsSet;

    int32_t m_Track_count;
    bool m_Track_countIsSet;

    utility::string_t m_Nfc_tag_id;
    bool m_Nfc_tag_idIsSet;

    double m_Server_seq;
    bool m_Server_seqIsSet;

    utility::datetime m_Created_at;
    bool m_Created_atIsSet;

    utility::datetime m_Updated_at;
    bool m_Updated_atIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PlaylistSummary_H_ */
