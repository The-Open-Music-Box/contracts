/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InitUploadSession_request.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_InitUploadSession_request_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_InitUploadSession_request_H_


#include "TombContracts/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class TOMB_API InitUploadSession_request
    : public ModelBase
{
public:
    InitUploadSession_request();
    virtual ~InitUploadSession_request();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// InitUploadSession_request members


    utility::string_t getFilename() const;
    bool filenameIsSet() const;
    void unsetFilename();
    void setFilename(const utility::string_t& value);

    /// <summary>
    /// Total file size in bytes
    /// </summary>
    int32_t getFileSize() const;
    bool fileSizeIsSet() const;
    void unsetFile_size();
    void setFileSize(int32_t value);

    /// <summary>
    /// Chunk size in bytes (default 1MB)
    /// </summary>
    int32_t getChunkSize() const;
    bool chunkSizeIsSet() const;
    void unsetChunk_size();
    void setChunkSize(int32_t value);

    utility::string_t getFileHash() const;
    bool fileHashIsSet() const;
    void unsetFile_hash();
    void setFileHash(const utility::string_t& value);


protected:
    utility::string_t m_Filename;
    bool m_FilenameIsSet;

    int32_t m_File_size;
    bool m_File_sizeIsSet;

    int32_t m_Chunk_size;
    bool m_Chunk_sizeIsSet;

    utility::string_t m_File_hash;
    bool m_File_hashIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_InitUploadSession_request_H_ */
