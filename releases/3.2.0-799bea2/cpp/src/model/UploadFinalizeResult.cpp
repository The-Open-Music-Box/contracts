/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/UploadFinalizeResult.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

UploadFinalizeResult::UploadFinalizeResult()
{
    m_StatusIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_TrackIsSet = false;
}

UploadFinalizeResult::~UploadFinalizeResult()
{
}

void UploadFinalizeResult::validate()
{
    // TODO: implement validation
}

web::json::value UploadFinalizeResult::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StatusIsSet)
    {   
        
        utility::string_t refVal = fromStatusEnum(m_Status);
        val[utility::conversions::to_string_t(_XPLATSTR("status"))] = ModelBase::toJson(refVal);
        
    }
    if(m_MessageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_TrackIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("track"))] = ModelBase::toJson(m_Track);
    }

    return val;
}

bool UploadFinalizeResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            
            setStatus(toStatusEnum(refVal_setStatus));
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("track"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("track")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Track> refVal_setTrack;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrack);
            setTrack(refVal_setTrack);
            
        }
    }
    return ok;
}

void UploadFinalizeResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("status")), fromStatusEnum(m_Status)));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("message")), m_Message));
    }
    if(m_TrackIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("track")), m_Track));
    }
}

bool UploadFinalizeResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("status"))), refVal_setStatus );
        setStatus(toStatusEnum(refVal_setStatus));
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("track"))))
    {
        std::shared_ptr<Track> refVal_setTrack;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("track"))), refVal_setTrack );
        setTrack(refVal_setTrack);
    }
    return ok;
}

UploadFinalizeResult::StatusEnum UploadFinalizeResult::toStatusEnum(const utility::string_t& value) const
{
    
    if (value == utility::conversions::to_string_t("success")) {
        return StatusEnum::SUCCESS;
    }
    
    if (value == utility::conversions::to_string_t("error")) {
        return StatusEnum::ERROR;
    }
    
    throw std::invalid_argument("Invalid value for conversion to StatusEnum");
}


const utility::string_t UploadFinalizeResult::fromStatusEnum(const StatusEnum value) const
{
    switch(value)
    {
        
        case StatusEnum::SUCCESS: return utility::conversions::to_string_t("success");
        
        case StatusEnum::ERROR: return utility::conversions::to_string_t("error");
        
    }
}


UploadFinalizeResult::StatusEnum UploadFinalizeResult::getStatus() const
{
    return m_Status;
}


void UploadFinalizeResult::setStatus(const StatusEnum value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool UploadFinalizeResult::statusIsSet() const
{
    return m_StatusIsSet;
}

void UploadFinalizeResult::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t UploadFinalizeResult::getMessage() const
{
    return m_Message;
}


void UploadFinalizeResult::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool UploadFinalizeResult::messageIsSet() const
{
    return m_MessageIsSet;
}

void UploadFinalizeResult::unsetMessage()
{
    m_MessageIsSet = false;
}
std::shared_ptr<Track> UploadFinalizeResult::getTrack() const
{
    return m_Track;
}


void UploadFinalizeResult::setTrack(const std::shared_ptr<Track>& value)
{
    m_Track = value;
    m_TrackIsSet = true;
}

bool UploadFinalizeResult::trackIsSet() const
{
    return m_TrackIsSet;
}

void UploadFinalizeResult::unsetTrack()
{
    m_TrackIsSet = false;
}

}
}
}
}


