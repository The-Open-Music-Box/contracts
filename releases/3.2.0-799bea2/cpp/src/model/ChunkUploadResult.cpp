/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/ChunkUploadResult.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ChunkUploadResult::ChunkUploadResult()
{
    m_Chunk_index = 0;
    m_Chunk_indexIsSet = false;
    m_Received = false;
    m_ReceivedIsSet = false;
    m_Total_chunks = 0;
    m_Total_chunksIsSet = false;
    m_Progress_percent = 0.0;
    m_Progress_percentIsSet = false;
}

ChunkUploadResult::~ChunkUploadResult()
{
}

void ChunkUploadResult::validate()
{
    // TODO: implement validation
}

web::json::value ChunkUploadResult::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Chunk_indexIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("chunk_index"))] = ModelBase::toJson(m_Chunk_index);
    }
    if(m_ReceivedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("received"))] = ModelBase::toJson(m_Received);
    }
    if(m_Total_chunksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("total_chunks"))] = ModelBase::toJson(m_Total_chunks);
    }
    if(m_Progress_percentIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("progress_percent"))] = ModelBase::toJson(m_Progress_percent);
    }

    return val;
}

bool ChunkUploadResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("chunk_index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("chunk_index")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setChunkIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChunkIndex);
            setChunkIndex(refVal_setChunkIndex);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("received"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("received")));
        if(!fieldValue.is_null())
        {
            bool refVal_setReceived;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReceived);
            setReceived(refVal_setReceived);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("total_chunks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("total_chunks")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalChunks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalChunks);
            setTotalChunks(refVal_setTotalChunks);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("progress_percent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("progress_percent")));
        if(!fieldValue.is_null())
        {
            double refVal_setProgressPercent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProgressPercent);
            setProgressPercent(refVal_setProgressPercent);
            
        }
    }
    return ok;
}

void ChunkUploadResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Chunk_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("chunk_index")), m_Chunk_index));
    }
    if(m_ReceivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("received")), m_Received));
    }
    if(m_Total_chunksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("total_chunks")), m_Total_chunks));
    }
    if(m_Progress_percentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("progress_percent")), m_Progress_percent));
    }
}

bool ChunkUploadResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("chunk_index"))))
    {
        int32_t refVal_setChunkIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("chunk_index"))), refVal_setChunkIndex );
        setChunkIndex(refVal_setChunkIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("received"))))
    {
        bool refVal_setReceived;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("received"))), refVal_setReceived );
        setReceived(refVal_setReceived);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("total_chunks"))))
    {
        int32_t refVal_setTotalChunks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("total_chunks"))), refVal_setTotalChunks );
        setTotalChunks(refVal_setTotalChunks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("progress_percent"))))
    {
        double refVal_setProgressPercent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("progress_percent"))), refVal_setProgressPercent );
        setProgressPercent(refVal_setProgressPercent);
    }
    return ok;
}


int32_t ChunkUploadResult::getChunkIndex() const
{
    return m_Chunk_index;
}

void ChunkUploadResult::setChunkIndex(int32_t value)
{
    m_Chunk_index = value;
    m_Chunk_indexIsSet = true;
}

bool ChunkUploadResult::chunkIndexIsSet() const
{
    return m_Chunk_indexIsSet;
}

void ChunkUploadResult::unsetChunk_index()
{
    m_Chunk_indexIsSet = false;
}
bool ChunkUploadResult::isReceived() const
{
    return m_Received;
}

void ChunkUploadResult::setReceived(bool value)
{
    m_Received = value;
    m_ReceivedIsSet = true;
}

bool ChunkUploadResult::receivedIsSet() const
{
    return m_ReceivedIsSet;
}

void ChunkUploadResult::unsetReceived()
{
    m_ReceivedIsSet = false;
}
int32_t ChunkUploadResult::getTotalChunks() const
{
    return m_Total_chunks;
}

void ChunkUploadResult::setTotalChunks(int32_t value)
{
    m_Total_chunks = value;
    m_Total_chunksIsSet = true;
}

bool ChunkUploadResult::totalChunksIsSet() const
{
    return m_Total_chunksIsSet;
}

void ChunkUploadResult::unsetTotal_chunks()
{
    m_Total_chunksIsSet = false;
}
double ChunkUploadResult::getProgressPercent() const
{
    return m_Progress_percent;
}

void ChunkUploadResult::setProgressPercent(double value)
{
    m_Progress_percent = value;
    m_Progress_percentIsSet = true;
}

bool ChunkUploadResult::progressPercentIsSet() const
{
    return m_Progress_percentIsSet;
}

void ChunkUploadResult::unsetProgress_percent()
{
    m_Progress_percentIsSet = false;
}

}
}
}
}


