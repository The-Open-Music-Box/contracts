/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ListPlaylists_200_response_allOf_data.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ListPlaylists_200_response_allOf_data_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ListPlaylists_200_response_allOf_data_H_


#include "TombContracts/ModelBase.h"

#include "TombContracts/model/PlaylistSummary.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PlaylistSummary;


class TOMB_API ListPlaylists_200_response_allOf_data
    : public ModelBase
{
public:
    ListPlaylists_200_response_allOf_data();
    virtual ~ListPlaylists_200_response_allOf_data();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// ListPlaylists_200_response_allOf_data members


    std::vector<std::shared_ptr<PlaylistSummary>> getPlaylists() const;
    bool playlistsIsSet() const;
    void unsetPlaylists();
    void setPlaylists(const std::vector<std::shared_ptr<PlaylistSummary>>& value);

    int32_t getPage() const;
    bool pageIsSet() const;
    void unsetPage();
    void setPage(int32_t value);

    int32_t getLimit() const;
    bool limitIsSet() const;
    void unsetLimit();
    void setLimit(int32_t value);

    int32_t getTotal() const;
    bool totalIsSet() const;
    void unsetTotal();
    void setTotal(int32_t value);

    int32_t getTotalPages() const;
    bool totalPagesIsSet() const;
    void unsetTotal_pages();
    void setTotalPages(int32_t value);


protected:
    std::vector<std::shared_ptr<PlaylistSummary>> m_Playlists;
    bool m_PlaylistsIsSet;

    int32_t m_Page;
    bool m_PageIsSet;

    int32_t m_Limit;
    bool m_LimitIsSet;

    int32_t m_Total;
    bool m_TotalIsSet;

    int32_t m_Total_pages;
    bool m_Total_pagesIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ListPlaylists_200_response_allOf_data_H_ */
