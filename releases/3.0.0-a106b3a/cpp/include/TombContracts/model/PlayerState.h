/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PlayerState.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PlayerState_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PlayerState_H_


#include "TombContracts/ModelBase.h"

#include "TombContracts/model/Track.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Track;


class TOMB_API PlayerState
    : public ModelBase
{
public:
    PlayerState();
    virtual ~PlayerState();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// PlayerState members


    bool isIsPlaying() const;
    bool isPlayingIsSet() const;
    void unsetIs_playing();
    void setIsPlaying(bool value);

    utility::string_t getActivePlaylistId() const;
    bool activePlaylistIdIsSet() const;
    void unsetActive_playlist_id();
    void setActivePlaylistId(const utility::string_t& value);

    utility::string_t getActivePlaylistTitle() const;
    bool activePlaylistTitleIsSet() const;
    void unsetActive_playlist_title();
    void setActivePlaylistTitle(const utility::string_t& value);

    utility::string_t getActiveTrackId() const;
    bool activeTrackIdIsSet() const;
    void unsetActive_track_id();
    void setActiveTrackId(const utility::string_t& value);

    std::shared_ptr<Track> getActiveTrack() const;
    bool activeTrackIsSet() const;
    void unsetActive_track();
    void setActiveTrack(const std::shared_ptr<Track>& value);

    /// <summary>
    /// 0-based track index in playlist
    /// </summary>
    int32_t getTrackIndex() const;
    bool trackIndexIsSet() const;
    void unsetTrack_index();
    void setTrackIndex(int32_t value);

    /// <summary>
    /// Total number of tracks in playlist
    /// </summary>
    int32_t getTrackCount() const;
    bool trackCountIsSet() const;
    void unsetTrack_count();
    void setTrackCount(int32_t value);

    /// <summary>
    /// Current playback position in milliseconds
    /// </summary>
    int32_t getPositionMs() const;
    bool positionMsIsSet() const;
    void unsetPosition_ms();
    void setPositionMs(int32_t value);

    /// <summary>
    /// Track duration in milliseconds
    /// </summary>
    int32_t getDurationMs() const;
    bool durationMsIsSet() const;
    void unsetDuration_ms();
    void setDurationMs(int32_t value);

    bool isCanPrev() const;
    bool canPrevIsSet() const;
    void unsetCan_prev();
    void setCanPrev(bool value);

    bool isCanNext() const;
    bool canNextIsSet() const;
    void unsetCan_next();
    void setCanNext(bool value);

    int32_t getVolume() const;
    bool volumeIsSet() const;
    void unsetVolume();
    void setVolume(int32_t value);

    double getServerSeq() const;
    bool serverSeqIsSet() const;
    void unsetServer_seq();
    void setServerSeq(double value);


protected:
    bool m_Is_playing;
    bool m_Is_playingIsSet;

    utility::string_t m_Active_playlist_id;
    bool m_Active_playlist_idIsSet;

    utility::string_t m_Active_playlist_title;
    bool m_Active_playlist_titleIsSet;

    utility::string_t m_Active_track_id;
    bool m_Active_track_idIsSet;

    std::shared_ptr<Track> m_Active_track;
    bool m_Active_trackIsSet;

    int32_t m_Track_index;
    bool m_Track_indexIsSet;

    int32_t m_Track_count;
    bool m_Track_countIsSet;

    int32_t m_Position_ms;
    bool m_Position_msIsSet;

    int32_t m_Duration_ms;
    bool m_Duration_msIsSet;

    bool m_Can_prev;
    bool m_Can_prevIsSet;

    bool m_Can_next;
    bool m_Can_nextIsSet;

    int32_t m_Volume;
    bool m_VolumeIsSet;

    double m_Server_seq;
    bool m_Server_seqIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PlayerState_H_ */
