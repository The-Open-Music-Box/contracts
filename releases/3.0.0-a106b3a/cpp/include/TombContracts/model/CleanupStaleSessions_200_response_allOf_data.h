/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CleanupStaleSessions_200_response_allOf_data.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CleanupStaleSessions_200_response_allOf_data_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CleanupStaleSessions_200_response_allOf_data_H_


#include "TombContracts/ModelBase.h"

#include "TombContracts/model/CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner;


class TOMB_API CleanupStaleSessions_200_response_allOf_data
    : public ModelBase
{
public:
    CleanupStaleSessions_200_response_allOf_data();
    virtual ~CleanupStaleSessions_200_response_allOf_data();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// CleanupStaleSessions_200_response_allOf_data members


    std::vector<std::shared_ptr<CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner>> getCleanedSessions() const;
    bool cleanedSessionsIsSet() const;
    void unsetCleaned_sessions();
    void setCleanedSessions(const std::vector<std::shared_ptr<CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner>>& value);


protected:
    std::vector<std::shared_ptr<CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner>> m_Cleaned_sessions;
    bool m_Cleaned_sessionsIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CleanupStaleSessions_200_response_allOf_data_H_ */
