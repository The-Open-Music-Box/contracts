/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetNFCStatus_200_response_allOf_data.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GetNFCStatus_200_response_allOf_data_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GetNFCStatus_200_response_allOf_data_H_


#include "TombContracts/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class TOMB_API GetNFCStatus_200_response_allOf_data
    : public ModelBase
{
public:
    GetNFCStatus_200_response_allOf_data();
    virtual ~GetNFCStatus_200_response_allOf_data();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// GetNFCStatus_200_response_allOf_data members


    bool isReaderAvailable() const;
    bool readerAvailableIsSet() const;
    void unsetReader_available();
    void setReaderAvailable(bool value);

    bool isScanning() const;
    bool scanningIsSet() const;
    void unsetScanning();
    void setScanning(bool value);

    bool isAssociationActive() const;
    bool associationActiveIsSet() const;
    void unsetAssociation_active();
    void setAssociationActive(bool value);

    utility::string_t getCurrentSessionId() const;
    bool currentSessionIdIsSet() const;
    void unsetCurrent_session_id();
    void setCurrentSessionId(const utility::string_t& value);

    std::vector<utility::string_t> getActiveSessions() const;
    bool activeSessionsIsSet() const;
    void unsetActive_sessions();
    void setActiveSessions(const std::vector<utility::string_t>& value);


protected:
    bool m_Reader_available;
    bool m_Reader_availableIsSet;

    bool m_Scanning;
    bool m_ScanningIsSet;

    bool m_Association_active;
    bool m_Association_activeIsSet;

    utility::string_t m_Current_session_id;
    bool m_Current_session_idIsSet;

    std::vector<utility::string_t> m_Active_sessions;
    bool m_Active_sessionsIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GetNFCStatus_200_response_allOf_data_H_ */
