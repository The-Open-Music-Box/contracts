/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/StartPlaylist_200_response_allOf_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

StartPlaylist_200_response_allOf_data::StartPlaylist_200_response_allOf_data()
{
    m_Playlist_id = utility::conversions::to_string_t("");
    m_Playlist_idIsSet = false;
    m_Started = false;
    m_StartedIsSet = false;
}

StartPlaylist_200_response_allOf_data::~StartPlaylist_200_response_allOf_data()
{
}

void StartPlaylist_200_response_allOf_data::validate()
{
    // TODO: implement validation
}

web::json::value StartPlaylist_200_response_allOf_data::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Playlist_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("playlist_id"))] = ModelBase::toJson(m_Playlist_id);
    }
    if(m_StartedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("started"))] = ModelBase::toJson(m_Started);
    }

    return val;
}

bool StartPlaylist_200_response_allOf_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("playlist_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlaylistId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlaylistId);
            setPlaylistId(refVal_setPlaylistId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("started"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("started")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStarted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStarted);
            setStarted(refVal_setStarted);
            
        }
    }
    return ok;
}

void StartPlaylist_200_response_allOf_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Playlist_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("playlist_id")), m_Playlist_id));
    }
    if(m_StartedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("started")), m_Started));
    }
}

bool StartPlaylist_200_response_allOf_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        utility::string_t refVal_setPlaylistId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))), refVal_setPlaylistId );
        setPlaylistId(refVal_setPlaylistId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("started"))))
    {
        bool refVal_setStarted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("started"))), refVal_setStarted );
        setStarted(refVal_setStarted);
    }
    return ok;
}


utility::string_t StartPlaylist_200_response_allOf_data::getPlaylistId() const
{
    return m_Playlist_id;
}


void StartPlaylist_200_response_allOf_data::setPlaylistId(const utility::string_t& value)
{
    m_Playlist_id = value;
    m_Playlist_idIsSet = true;
}

bool StartPlaylist_200_response_allOf_data::playlistIdIsSet() const
{
    return m_Playlist_idIsSet;
}

void StartPlaylist_200_response_allOf_data::unsetPlaylist_id()
{
    m_Playlist_idIsSet = false;
}
bool StartPlaylist_200_response_allOf_data::isStarted() const
{
    return m_Started;
}

void StartPlaylist_200_response_allOf_data::setStarted(bool value)
{
    m_Started = value;
    m_StartedIsSet = true;
}

bool StartPlaylist_200_response_allOf_data::startedIsSet() const
{
    return m_StartedIsSet;
}

void StartPlaylist_200_response_allOf_data::unsetStarted()
{
    m_StartedIsSet = false;
}

}
}
}
}


