/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/UploadSession.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

UploadSession::UploadSession()
{
    m_Session_id = utility::conversions::to_string_t("");
    m_Session_idIsSet = false;
    m_Playlist_id = utility::conversions::to_string_t("");
    m_Playlist_idIsSet = false;
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_File_size = 0;
    m_File_sizeIsSet = false;
    m_Chunk_size = 0;
    m_Chunk_sizeIsSet = false;
    m_Total_chunks = 0;
    m_Total_chunksIsSet = false;
    m_File_hash = utility::conversions::to_string_t("");
    m_File_hashIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
}

UploadSession::~UploadSession()
{
}

void UploadSession::validate()
{
    // TODO: implement validation
}

web::json::value UploadSession::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Session_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("session_id"))] = ModelBase::toJson(m_Session_id);
    }
    if(m_Playlist_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("playlist_id"))] = ModelBase::toJson(m_Playlist_id);
    }
    if(m_FilenameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("filename"))] = ModelBase::toJson(m_Filename);
    }
    if(m_File_sizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("file_size"))] = ModelBase::toJson(m_File_size);
    }
    if(m_Chunk_sizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("chunk_size"))] = ModelBase::toJson(m_Chunk_size);
    }
    if(m_Total_chunksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("total_chunks"))] = ModelBase::toJson(m_Total_chunks);
    }
    if(m_File_hashIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("file_hash"))] = ModelBase::toJson(m_File_hash);
    }
    if(m_Created_atIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("created_at"))] = ModelBase::toJson(m_Created_at);
    }

    return val;
}

bool UploadSession::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("session_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("session_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSessionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionId);
            setSessionId(refVal_setSessionId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("playlist_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlaylistId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlaylistId);
            setPlaylistId(refVal_setPlaylistId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("filename"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("filename")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFilename;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilename);
            setFilename(refVal_setFilename);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("file_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("file_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFileSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileSize);
            setFileSize(refVal_setFileSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("chunk_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("chunk_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setChunkSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChunkSize);
            setChunkSize(refVal_setChunkSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("total_chunks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("total_chunks")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalChunks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalChunks);
            setTotalChunks(refVal_setTotalChunks);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("file_hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("file_hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFileHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileHash);
            setFileHash(refVal_setFileHash);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
            
        }
    }
    return ok;
}

void UploadSession::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Session_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("session_id")), m_Session_id));
    }
    if(m_Playlist_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("playlist_id")), m_Playlist_id));
    }
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("filename")), m_Filename));
    }
    if(m_File_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("file_size")), m_File_size));
    }
    if(m_Chunk_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("chunk_size")), m_Chunk_size));
    }
    if(m_Total_chunksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("total_chunks")), m_Total_chunks));
    }
    if(m_File_hashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("file_hash")), m_File_hash));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("created_at")), m_Created_at));
    }
}

bool UploadSession::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("session_id"))))
    {
        utility::string_t refVal_setSessionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("session_id"))), refVal_setSessionId );
        setSessionId(refVal_setSessionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        utility::string_t refVal_setPlaylistId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))), refVal_setPlaylistId );
        setPlaylistId(refVal_setPlaylistId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("filename"))))
    {
        utility::string_t refVal_setFilename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("filename"))), refVal_setFilename );
        setFilename(refVal_setFilename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("file_size"))))
    {
        int32_t refVal_setFileSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("file_size"))), refVal_setFileSize );
        setFileSize(refVal_setFileSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("chunk_size"))))
    {
        int32_t refVal_setChunkSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("chunk_size"))), refVal_setChunkSize );
        setChunkSize(refVal_setChunkSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("total_chunks"))))
    {
        int32_t refVal_setTotalChunks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("total_chunks"))), refVal_setTotalChunks );
        setTotalChunks(refVal_setTotalChunks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("file_hash"))))
    {
        utility::string_t refVal_setFileHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("file_hash"))), refVal_setFileHash );
        setFileHash(refVal_setFileHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}


utility::string_t UploadSession::getSessionId() const
{
    return m_Session_id;
}


void UploadSession::setSessionId(const utility::string_t& value)
{
    m_Session_id = value;
    m_Session_idIsSet = true;
}

bool UploadSession::sessionIdIsSet() const
{
    return m_Session_idIsSet;
}

void UploadSession::unsetSession_id()
{
    m_Session_idIsSet = false;
}
utility::string_t UploadSession::getPlaylistId() const
{
    return m_Playlist_id;
}


void UploadSession::setPlaylistId(const utility::string_t& value)
{
    m_Playlist_id = value;
    m_Playlist_idIsSet = true;
}

bool UploadSession::playlistIdIsSet() const
{
    return m_Playlist_idIsSet;
}

void UploadSession::unsetPlaylist_id()
{
    m_Playlist_idIsSet = false;
}
utility::string_t UploadSession::getFilename() const
{
    return m_Filename;
}


void UploadSession::setFilename(const utility::string_t& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}

bool UploadSession::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void UploadSession::unsetFilename()
{
    m_FilenameIsSet = false;
}
int32_t UploadSession::getFileSize() const
{
    return m_File_size;
}

void UploadSession::setFileSize(int32_t value)
{
    m_File_size = value;
    m_File_sizeIsSet = true;
}

bool UploadSession::fileSizeIsSet() const
{
    return m_File_sizeIsSet;
}

void UploadSession::unsetFile_size()
{
    m_File_sizeIsSet = false;
}
int32_t UploadSession::getChunkSize() const
{
    return m_Chunk_size;
}

void UploadSession::setChunkSize(int32_t value)
{
    m_Chunk_size = value;
    m_Chunk_sizeIsSet = true;
}

bool UploadSession::chunkSizeIsSet() const
{
    return m_Chunk_sizeIsSet;
}

void UploadSession::unsetChunk_size()
{
    m_Chunk_sizeIsSet = false;
}
int32_t UploadSession::getTotalChunks() const
{
    return m_Total_chunks;
}

void UploadSession::setTotalChunks(int32_t value)
{
    m_Total_chunks = value;
    m_Total_chunksIsSet = true;
}

bool UploadSession::totalChunksIsSet() const
{
    return m_Total_chunksIsSet;
}

void UploadSession::unsetTotal_chunks()
{
    m_Total_chunksIsSet = false;
}
utility::string_t UploadSession::getFileHash() const
{
    return m_File_hash;
}


void UploadSession::setFileHash(const utility::string_t& value)
{
    m_File_hash = value;
    m_File_hashIsSet = true;
}

bool UploadSession::fileHashIsSet() const
{
    return m_File_hashIsSet;
}

void UploadSession::unsetFile_hash()
{
    m_File_hashIsSet = false;
}
utility::datetime UploadSession::getCreatedAt() const
{
    return m_Created_at;
}


void UploadSession::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool UploadSession::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void UploadSession::unsetCreated_at()
{
    m_Created_atIsSet = false;
}

}
}
}
}


