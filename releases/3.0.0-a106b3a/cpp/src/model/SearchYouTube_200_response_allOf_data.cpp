/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/SearchYouTube_200_response_allOf_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SearchYouTube_200_response_allOf_data::SearchYouTube_200_response_allOf_data()
{
    m_ResultsIsSet = false;
}

SearchYouTube_200_response_allOf_data::~SearchYouTube_200_response_allOf_data()
{
}

void SearchYouTube_200_response_allOf_data::validate()
{
    // TODO: implement validation
}

web::json::value SearchYouTube_200_response_allOf_data::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_ResultsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("results"))] = ModelBase::toJson(m_Results);
    }

    return val;
}

bool SearchYouTube_200_response_allOf_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("results"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("results")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<YouTubeSearchResult>> refVal_setResults;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResults);
            setResults(refVal_setResults);
            
        }
    }
    return ok;
}

void SearchYouTube_200_response_allOf_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_ResultsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("results")), m_Results));
    }
}

bool SearchYouTube_200_response_allOf_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("results"))))
    {
        std::vector<std::shared_ptr<YouTubeSearchResult>> refVal_setResults;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("results"))), refVal_setResults );
        setResults(refVal_setResults);
    }
    return ok;
}


std::vector<std::shared_ptr<YouTubeSearchResult>> SearchYouTube_200_response_allOf_data::getResults() const
{
    return m_Results;
}


void SearchYouTube_200_response_allOf_data::setResults(const std::vector<std::shared_ptr<YouTubeSearchResult>>& value)
{
    m_Results = value;
    m_ResultsIsSet = true;
}

bool SearchYouTube_200_response_allOf_data::resultsIsSet() const
{
    return m_ResultsIsSet;
}

void SearchYouTube_200_response_allOf_data::unsetResults()
{
    m_ResultsIsSet = false;
}

}
}
}
}


