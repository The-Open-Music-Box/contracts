/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/YouTubeSearchResult.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

YouTubeSearchResult::YouTubeSearchResult()
{
    m_Video_id = utility::conversions::to_string_t("");
    m_Video_idIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Duration = 0;
    m_DurationIsSet = false;
    m_Thumbnail = utility::conversions::to_string_t("");
    m_ThumbnailIsSet = false;
    m_Channel = utility::conversions::to_string_t("");
    m_ChannelIsSet = false;
}

YouTubeSearchResult::~YouTubeSearchResult()
{
}

void YouTubeSearchResult::validate()
{
    // TODO: implement validation
}

web::json::value YouTubeSearchResult::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Video_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("video_id"))] = ModelBase::toJson(m_Video_id);
    }
    if(m_TitleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_DurationIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("duration"))] = ModelBase::toJson(m_Duration);
    }
    if(m_ThumbnailIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("thumbnail"))] = ModelBase::toJson(m_Thumbnail);
    }
    if(m_ChannelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("channel"))] = ModelBase::toJson(m_Channel);
    }

    return val;
}

bool YouTubeSearchResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("video_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("video_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVideoId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVideoId);
            setVideoId(refVal_setVideoId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("duration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("duration")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDuration);
            setDuration(refVal_setDuration);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("thumbnail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("thumbnail")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThumbnail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnail);
            setThumbnail(refVal_setThumbnail);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("channel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("channel")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChannel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChannel);
            setChannel(refVal_setChannel);
            
        }
    }
    return ok;
}

void YouTubeSearchResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Video_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("video_id")), m_Video_id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("title")), m_Title));
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("duration")), m_Duration));
    }
    if(m_ThumbnailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("thumbnail")), m_Thumbnail));
    }
    if(m_ChannelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("channel")), m_Channel));
    }
}

bool YouTubeSearchResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("video_id"))))
    {
        utility::string_t refVal_setVideoId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("video_id"))), refVal_setVideoId );
        setVideoId(refVal_setVideoId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("duration"))))
    {
        int32_t refVal_setDuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("duration"))), refVal_setDuration );
        setDuration(refVal_setDuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("thumbnail"))))
    {
        utility::string_t refVal_setThumbnail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("thumbnail"))), refVal_setThumbnail );
        setThumbnail(refVal_setThumbnail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("channel"))))
    {
        utility::string_t refVal_setChannel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("channel"))), refVal_setChannel );
        setChannel(refVal_setChannel);
    }
    return ok;
}


utility::string_t YouTubeSearchResult::getVideoId() const
{
    return m_Video_id;
}


void YouTubeSearchResult::setVideoId(const utility::string_t& value)
{
    m_Video_id = value;
    m_Video_idIsSet = true;
}

bool YouTubeSearchResult::videoIdIsSet() const
{
    return m_Video_idIsSet;
}

void YouTubeSearchResult::unsetVideo_id()
{
    m_Video_idIsSet = false;
}
utility::string_t YouTubeSearchResult::getTitle() const
{
    return m_Title;
}


void YouTubeSearchResult::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool YouTubeSearchResult::titleIsSet() const
{
    return m_TitleIsSet;
}

void YouTubeSearchResult::unsetTitle()
{
    m_TitleIsSet = false;
}
int32_t YouTubeSearchResult::getDuration() const
{
    return m_Duration;
}

void YouTubeSearchResult::setDuration(int32_t value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}

bool YouTubeSearchResult::durationIsSet() const
{
    return m_DurationIsSet;
}

void YouTubeSearchResult::unsetDuration()
{
    m_DurationIsSet = false;
}
utility::string_t YouTubeSearchResult::getThumbnail() const
{
    return m_Thumbnail;
}


void YouTubeSearchResult::setThumbnail(const utility::string_t& value)
{
    m_Thumbnail = value;
    m_ThumbnailIsSet = true;
}

bool YouTubeSearchResult::thumbnailIsSet() const
{
    return m_ThumbnailIsSet;
}

void YouTubeSearchResult::unsetThumbnail()
{
    m_ThumbnailIsSet = false;
}
utility::string_t YouTubeSearchResult::getChannel() const
{
    return m_Channel;
}


void YouTubeSearchResult::setChannel(const utility::string_t& value)
{
    m_Channel = value;
    m_ChannelIsSet = true;
}

bool YouTubeSearchResult::channelIsSet() const
{
    return m_ChannelIsSet;
}

void YouTubeSearchResult::unsetChannel()
{
    m_ChannelIsSet = false;
}

}
}
}
}


