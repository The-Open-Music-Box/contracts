/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/HealthStatus_services.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

HealthStatus_services::HealthStatus_services()
{
    m_Api = false;
    m_ApiIsSet = false;
    m_Audio = false;
    m_AudioIsSet = false;
    m_Nfc = false;
    m_NfcIsSet = false;
    m_Gpio = false;
    m_GpioIsSet = false;
    m_Led_hat = false;
    m_Led_hatIsSet = false;
    m_Websocket = false;
    m_WebsocketIsSet = false;
}

HealthStatus_services::~HealthStatus_services()
{
}

void HealthStatus_services::validate()
{
    // TODO: implement validation
}

web::json::value HealthStatus_services::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_ApiIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("api"))] = ModelBase::toJson(m_Api);
    }
    if(m_AudioIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("audio"))] = ModelBase::toJson(m_Audio);
    }
    if(m_NfcIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("nfc"))] = ModelBase::toJson(m_Nfc);
    }
    if(m_GpioIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("gpio"))] = ModelBase::toJson(m_Gpio);
    }
    if(m_Led_hatIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("led_hat"))] = ModelBase::toJson(m_Led_hat);
    }
    if(m_WebsocketIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("websocket"))] = ModelBase::toJson(m_Websocket);
    }

    return val;
}

bool HealthStatus_services::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("api"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("api")));
        if(!fieldValue.is_null())
        {
            bool refVal_setApi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApi);
            setApi(refVal_setApi);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("audio"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("audio")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAudio;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAudio);
            setAudio(refVal_setAudio);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("nfc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("nfc")));
        if(!fieldValue.is_null())
        {
            bool refVal_setNfc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNfc);
            setNfc(refVal_setNfc);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("gpio"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("gpio")));
        if(!fieldValue.is_null())
        {
            bool refVal_setGpio;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpio);
            setGpio(refVal_setGpio);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("led_hat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("led_hat")));
        if(!fieldValue.is_null())
        {
            bool refVal_setLedHat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLedHat);
            setLedHat(refVal_setLedHat);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("websocket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("websocket")));
        if(!fieldValue.is_null())
        {
            bool refVal_setWebsocket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebsocket);
            setWebsocket(refVal_setWebsocket);
            
        }
    }
    return ok;
}

void HealthStatus_services::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_ApiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("api")), m_Api));
    }
    if(m_AudioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("audio")), m_Audio));
    }
    if(m_NfcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("nfc")), m_Nfc));
    }
    if(m_GpioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("gpio")), m_Gpio));
    }
    if(m_Led_hatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("led_hat")), m_Led_hat));
    }
    if(m_WebsocketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("websocket")), m_Websocket));
    }
}

bool HealthStatus_services::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("api"))))
    {
        bool refVal_setApi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("api"))), refVal_setApi );
        setApi(refVal_setApi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("audio"))))
    {
        bool refVal_setAudio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("audio"))), refVal_setAudio );
        setAudio(refVal_setAudio);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("nfc"))))
    {
        bool refVal_setNfc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("nfc"))), refVal_setNfc );
        setNfc(refVal_setNfc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("gpio"))))
    {
        bool refVal_setGpio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("gpio"))), refVal_setGpio );
        setGpio(refVal_setGpio);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("led_hat"))))
    {
        bool refVal_setLedHat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("led_hat"))), refVal_setLedHat );
        setLedHat(refVal_setLedHat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("websocket"))))
    {
        bool refVal_setWebsocket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("websocket"))), refVal_setWebsocket );
        setWebsocket(refVal_setWebsocket);
    }
    return ok;
}


bool HealthStatus_services::isApi() const
{
    return m_Api;
}

void HealthStatus_services::setApi(bool value)
{
    m_Api = value;
    m_ApiIsSet = true;
}

bool HealthStatus_services::apiIsSet() const
{
    return m_ApiIsSet;
}

void HealthStatus_services::unsetApi()
{
    m_ApiIsSet = false;
}
bool HealthStatus_services::isAudio() const
{
    return m_Audio;
}

void HealthStatus_services::setAudio(bool value)
{
    m_Audio = value;
    m_AudioIsSet = true;
}

bool HealthStatus_services::audioIsSet() const
{
    return m_AudioIsSet;
}

void HealthStatus_services::unsetAudio()
{
    m_AudioIsSet = false;
}
bool HealthStatus_services::isNfc() const
{
    return m_Nfc;
}

void HealthStatus_services::setNfc(bool value)
{
    m_Nfc = value;
    m_NfcIsSet = true;
}

bool HealthStatus_services::nfcIsSet() const
{
    return m_NfcIsSet;
}

void HealthStatus_services::unsetNfc()
{
    m_NfcIsSet = false;
}
bool HealthStatus_services::isGpio() const
{
    return m_Gpio;
}

void HealthStatus_services::setGpio(bool value)
{
    m_Gpio = value;
    m_GpioIsSet = true;
}

bool HealthStatus_services::gpioIsSet() const
{
    return m_GpioIsSet;
}

void HealthStatus_services::unsetGpio()
{
    m_GpioIsSet = false;
}
bool HealthStatus_services::isLedHat() const
{
    return m_Led_hat;
}

void HealthStatus_services::setLedHat(bool value)
{
    m_Led_hat = value;
    m_Led_hatIsSet = true;
}

bool HealthStatus_services::ledHatIsSet() const
{
    return m_Led_hatIsSet;
}

void HealthStatus_services::unsetLed_hat()
{
    m_Led_hatIsSet = false;
}
bool HealthStatus_services::isWebsocket() const
{
    return m_Websocket;
}

void HealthStatus_services::setWebsocket(bool value)
{
    m_Websocket = value;
    m_WebsocketIsSet = true;
}

bool HealthStatus_services::websocketIsSet() const
{
    return m_WebsocketIsSet;
}

void HealthStatus_services::unsetWebsocket()
{
    m_WebsocketIsSet = false;
}

}
}
}
}


