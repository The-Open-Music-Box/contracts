/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/SetVolume_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SetVolume_request::SetVolume_request()
{
    m_Volume = 0;
    m_VolumeIsSet = false;
    m_Client_op_id = utility::conversions::to_string_t("");
    m_Client_op_idIsSet = false;
}

SetVolume_request::~SetVolume_request()
{
}

void SetVolume_request::validate()
{
    // TODO: implement validation
}

web::json::value SetVolume_request::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_VolumeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume"))] = ModelBase::toJson(m_Volume);
    }
    if(m_Client_op_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("client_op_id"))] = ModelBase::toJson(m_Client_op_id);
    }

    return val;
}

bool SetVolume_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume);
            setVolume(refVal_setVolume);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("client_op_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientOpId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientOpId);
            setClientOpId(refVal_setClientOpId);
            
        }
    }
    return ok;
}

void SetVolume_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_VolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume")), m_Volume));
    }
    if(m_Client_op_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("client_op_id")), m_Client_op_id));
    }
}

bool SetVolume_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume"))))
    {
        int32_t refVal_setVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume"))), refVal_setVolume );
        setVolume(refVal_setVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))))
    {
        utility::string_t refVal_setClientOpId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))), refVal_setClientOpId );
        setClientOpId(refVal_setClientOpId);
    }
    return ok;
}


int32_t SetVolume_request::getVolume() const
{
    return m_Volume;
}

void SetVolume_request::setVolume(int32_t value)
{
    m_Volume = value;
    m_VolumeIsSet = true;
}

bool SetVolume_request::volumeIsSet() const
{
    return m_VolumeIsSet;
}

void SetVolume_request::unsetVolume()
{
    m_VolumeIsSet = false;
}
utility::string_t SetVolume_request::getClientOpId() const
{
    return m_Client_op_id;
}


void SetVolume_request::setClientOpId(const utility::string_t& value)
{
    m_Client_op_id = value;
    m_Client_op_idIsSet = true;
}

bool SetVolume_request::clientOpIdIsSet() const
{
    return m_Client_op_idIsSet;
}

void SetVolume_request::unsetClient_op_id()
{
    m_Client_op_idIsSet = false;
}

}
}
}
}


