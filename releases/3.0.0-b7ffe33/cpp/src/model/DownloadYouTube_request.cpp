/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/DownloadYouTube_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DownloadYouTube_request::DownloadYouTube_request()
{
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Playlist_id = utility::conversions::to_string_t("");
    m_Playlist_idIsSet = false;
    m_Quality = utility::conversions::to_string_t("");
    m_QualityIsSet = false;
    m_Client_op_id = utility::conversions::to_string_t("");
    m_Client_op_idIsSet = false;
}

DownloadYouTube_request::~DownloadYouTube_request()
{
}

void DownloadYouTube_request::validate()
{
    // TODO: implement validation
}

web::json::value DownloadYouTube_request::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_UrlIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_Playlist_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("playlist_id"))] = ModelBase::toJson(m_Playlist_id);
    }
    if(m_QualityIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("quality"))] = ModelBase::toJson(m_Quality);
    }
    if(m_Client_op_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("client_op_id"))] = ModelBase::toJson(m_Client_op_id);
    }

    return val;
}

bool DownloadYouTube_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("playlist_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlaylistId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlaylistId);
            setPlaylistId(refVal_setPlaylistId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("quality"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("quality")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQuality;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuality);
            setQuality(refVal_setQuality);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("client_op_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientOpId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientOpId);
            setClientOpId(refVal_setClientOpId);
            
        }
    }
    return ok;
}

void DownloadYouTube_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("url")), m_Url));
    }
    if(m_Playlist_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("playlist_id")), m_Playlist_id));
    }
    if(m_QualityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("quality")), m_Quality));
    }
    if(m_Client_op_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("client_op_id")), m_Client_op_id));
    }
}

bool DownloadYouTube_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        utility::string_t refVal_setPlaylistId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))), refVal_setPlaylistId );
        setPlaylistId(refVal_setPlaylistId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("quality"))))
    {
        utility::string_t refVal_setQuality;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("quality"))), refVal_setQuality );
        setQuality(refVal_setQuality);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))))
    {
        utility::string_t refVal_setClientOpId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))), refVal_setClientOpId );
        setClientOpId(refVal_setClientOpId);
    }
    return ok;
}


utility::string_t DownloadYouTube_request::getUrl() const
{
    return m_Url;
}


void DownloadYouTube_request::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool DownloadYouTube_request::urlIsSet() const
{
    return m_UrlIsSet;
}

void DownloadYouTube_request::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t DownloadYouTube_request::getPlaylistId() const
{
    return m_Playlist_id;
}


void DownloadYouTube_request::setPlaylistId(const utility::string_t& value)
{
    m_Playlist_id = value;
    m_Playlist_idIsSet = true;
}

bool DownloadYouTube_request::playlistIdIsSet() const
{
    return m_Playlist_idIsSet;
}

void DownloadYouTube_request::unsetPlaylist_id()
{
    m_Playlist_idIsSet = false;
}
utility::string_t DownloadYouTube_request::getQuality() const
{
    return m_Quality;
}


void DownloadYouTube_request::setQuality(const utility::string_t& value)
{
    m_Quality = value;
    m_QualityIsSet = true;
}

bool DownloadYouTube_request::qualityIsSet() const
{
    return m_QualityIsSet;
}

void DownloadYouTube_request::unsetQuality()
{
    m_QualityIsSet = false;
}
utility::string_t DownloadYouTube_request::getClientOpId() const
{
    return m_Client_op_id;
}


void DownloadYouTube_request::setClientOpId(const utility::string_t& value)
{
    m_Client_op_id = value;
    m_Client_op_idIsSet = true;
}

bool DownloadYouTube_request::clientOpIdIsSet() const
{
    return m_Client_op_idIsSet;
}

void DownloadYouTube_request::unsetClient_op_id()
{
    m_Client_op_idIsSet = false;
}

}
}
}
}


