/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/player/play": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start/resume playback */
        post: operations["playerPlay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/player/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause playback */
        post: operations["playerPause"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/player/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop playback */
        post: operations["playerStop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/player/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Skip to next track */
        post: operations["playerNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/player/previous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Skip to previous track */
        post: operations["playerPrevious"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/player/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle play/pause */
        post: operations["playerToggle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/player/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current player status */
        get: operations["getPlayerStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/player/seek": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Seek to position in current track */
        post: operations["playerSeek"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/player/volume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set volume level */
        post: operations["setVolume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/playlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all playlists with pagination */
        get: operations["listPlaylists"];
        put?: never;
        /** Create new playlist */
        post: operations["createPlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/playlists/{playlist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get specific playlist */
        get: operations["getPlaylist"];
        /** Update playlist */
        put: operations["updatePlaylist"];
        post?: never;
        /** Delete playlist */
        delete: operations["deletePlaylist"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/playlists/{playlist_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start playlist playback */
        post: operations["startPlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/nfc/associate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Associate NFC tag with playlist */
        post: operations["associateNFC"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/nfc/associate/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove NFC tag association */
        delete: operations["removeNFCAssociation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/nfc/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get NFC reader status */
        get: operations["getNFCStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get system information */
        get: operations["getSystemInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/youtube/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Download audio from YouTube URL */
        post: operations["downloadYouTube"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Standardized response wrapper used by all API endpoints */
        UnifiedResponse: {
            /** @enum {string} */
            status: "success" | "error";
            message: string;
            data?: Record<string, never> | unknown[] | null;
            /** @description Client operation ID for operation tracking */
            client_op_id?: string | null;
            /** @description Server sequence number for state synchronization */
            server_seq?: number | null;
            /** @description Unix timestamp in seconds */
            timestamp: number;
            request_id?: string | null;
            /** @enum {string|null} */
            error_type?: "validation_error" | "not_found" | "rate_limit_exceeded" | "service_unavailable" | "internal_error" | "conflict" | "bad_request" | null;
            details?: {
                [key: string]: unknown;
            } | null;
        };
        Track: {
            /** @description Track number in playlist */
            number: number;
            title: string;
            filename: string;
            file_path?: string;
            /** @description Duration in seconds */
            duration?: number | null;
            /** @description Duration in milliseconds */
            duration_ms?: number | null;
            artist?: string | null;
            album?: string | null;
            file_size?: number | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        PlaylistSummary: {
            id: string;
            title: string;
            track_count: number;
            nfc_tag_id?: string | null;
            server_seq?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        PlaylistDetailed: {
            id: string;
            title: string;
            description?: string;
            tracks: components["schemas"]["Track"][];
            nfc_tag_id?: string | null;
            server_seq?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            total_duration_ms?: number;
        };
        PlayerState: {
            is_playing: boolean;
            active_playlist_id?: string | null;
            active_playlist_title?: string | null;
            active_track_id?: string | null;
            active_track?: components["schemas"]["Track"] | null;
            /** @description 0-based track index in playlist */
            track_index?: number | null;
            /** @description Total number of tracks in playlist */
            track_count?: number | null;
            /** @description Current playback position in milliseconds */
            position_ms: number;
            /** @description Track duration in milliseconds */
            duration_ms?: number | null;
            can_prev: boolean;
            can_next: boolean;
            volume?: number | null;
            server_seq: number;
        };
        NFCAssociation: {
            tag_id: string;
            playlist_id: string;
            playlist_title: string;
            /** Format: date-time */
            created_at: string;
        };
        SystemInfo: {
            platform: string;
            platform_release: string;
            platform_version: string;
            architecture: string;
            hostname: string;
            processor: string;
            memory_total?: number;
            memory_available?: number;
            memory_percent?: number;
        };
        HealthStatus: {
            /** @enum {string} */
            status: "healthy" | "degraded" | "unhealthy";
            services: {
                api: boolean;
                audio: boolean;
                nfc: boolean;
                gpio: boolean;
                led_hat: boolean;
                websocket: boolean;
            };
            timestamp: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["HealthStatus"];
                    };
                };
            };
        };
    };
    playerPlay: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Player state after play command */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlayerState"];
                    };
                };
            };
        };
    };
    playerPause: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Player state after pause command */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlayerState"];
                    };
                };
            };
        };
    };
    playerStop: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Player state after stop command */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlayerState"];
                    };
                };
            };
        };
    };
    playerNext: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Player state after next command */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlayerState"];
                    };
                };
            };
        };
    };
    playerPrevious: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Player state after previous command */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlayerState"];
                    };
                };
            };
        };
    };
    playerToggle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Player state after toggle command */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlayerState"];
                    };
                };
            };
        };
    };
    getPlayerStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current player state */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlayerState"];
                    };
                };
            };
        };
    };
    playerSeek: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Position in milliseconds */
                    position_ms: number;
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Player state after seek */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlayerState"];
                    };
                };
            };
        };
    };
    setVolume: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    volume: number;
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Volume confirmation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: {
                            volume?: number;
                        };
                    };
                };
            };
        };
    };
    listPlaylists: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of playlists */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: {
                            playlists: components["schemas"]["PlaylistSummary"][];
                            page: number;
                            limit: number;
                            total: number;
                            total_pages: number;
                        };
                    };
                };
            };
        };
    };
    createPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    title: string;
                    description?: string;
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Created playlist */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlaylistDetailed"];
                    };
                };
            };
        };
    };
    getPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Playlist details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: components["schemas"]["PlaylistDetailed"];
                    };
                };
            };
        };
    };
    updatePlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    title?: string;
                    description?: string;
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Update confirmation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: {
                            client_op_id?: string;
                        };
                    };
                };
            };
        };
    };
    deletePlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Playlist deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    startPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Playlist started */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: {
                            playlist_id?: string;
                            started?: boolean;
                        };
                    };
                };
            };
        };
    };
    associateNFC: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    playlist_id: string;
                    tag_id: string;
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description NFC association created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: {
                            association?: components["schemas"]["NFCAssociation"];
                        };
                    };
                };
            };
        };
    };
    removeNFCAssociation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Association removed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"];
                };
            };
        };
    };
    getNFCStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description NFC reader status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: {
                            reader_available: boolean;
                            scanning: boolean;
                            association_active: boolean;
                            current_session_id?: string | null;
                            active_sessions: string[];
                        };
                    };
                };
            };
        };
    };
    getSystemInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description System information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: {
                            system_info: components["schemas"]["SystemInfo"];
                            version: string;
                            hostname: string;
                            uptime: number;
                        };
                    };
                };
            };
        };
    };
    downloadYouTube: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uri */
                    url: string;
                    playlist_id: string;
                    quality?: string;
                    client_op_id?: string;
                };
            };
        };
        responses: {
            /** @description Download task initiated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnifiedResponse"] & {
                        data?: {
                            task_id?: string;
                            status?: string;
                        };
                    };
                };
            };
        };
    };
}
