/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/GetNFCStatus_200_response_allOf_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GetNFCStatus_200_response_allOf_data::GetNFCStatus_200_response_allOf_data()
{
    m_Reader_available = false;
    m_Reader_availableIsSet = false;
    m_Scanning = false;
    m_ScanningIsSet = false;
    m_Association_active = false;
    m_Association_activeIsSet = false;
    m_Current_session_id = utility::conversions::to_string_t("");
    m_Current_session_idIsSet = false;
    m_Active_sessionsIsSet = false;
}

GetNFCStatus_200_response_allOf_data::~GetNFCStatus_200_response_allOf_data()
{
}

void GetNFCStatus_200_response_allOf_data::validate()
{
    // TODO: implement validation
}

web::json::value GetNFCStatus_200_response_allOf_data::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Reader_availableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("reader_available"))] = ModelBase::toJson(m_Reader_available);
    }
    if(m_ScanningIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("scanning"))] = ModelBase::toJson(m_Scanning);
    }
    if(m_Association_activeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("association_active"))] = ModelBase::toJson(m_Association_active);
    }
    if(m_Current_session_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("current_session_id"))] = ModelBase::toJson(m_Current_session_id);
    }
    if(m_Active_sessionsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("active_sessions"))] = ModelBase::toJson(m_Active_sessions);
    }

    return val;
}

bool GetNFCStatus_200_response_allOf_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("reader_available"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("reader_available")));
        if(!fieldValue.is_null())
        {
            bool refVal_setReaderAvailable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReaderAvailable);
            setReaderAvailable(refVal_setReaderAvailable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("scanning"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("scanning")));
        if(!fieldValue.is_null())
        {
            bool refVal_setScanning;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScanning);
            setScanning(refVal_setScanning);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("association_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("association_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAssociationActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssociationActive);
            setAssociationActive(refVal_setAssociationActive);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("current_session_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("current_session_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrentSessionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentSessionId);
            setCurrentSessionId(refVal_setCurrentSessionId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("active_sessions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("active_sessions")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setActiveSessions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveSessions);
            setActiveSessions(refVal_setActiveSessions);
            
        }
    }
    return ok;
}

void GetNFCStatus_200_response_allOf_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Reader_availableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("reader_available")), m_Reader_available));
    }
    if(m_ScanningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("scanning")), m_Scanning));
    }
    if(m_Association_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("association_active")), m_Association_active));
    }
    if(m_Current_session_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("current_session_id")), m_Current_session_id));
    }
    if(m_Active_sessionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("active_sessions")), m_Active_sessions));
    }
}

bool GetNFCStatus_200_response_allOf_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("reader_available"))))
    {
        bool refVal_setReaderAvailable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("reader_available"))), refVal_setReaderAvailable );
        setReaderAvailable(refVal_setReaderAvailable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("scanning"))))
    {
        bool refVal_setScanning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("scanning"))), refVal_setScanning );
        setScanning(refVal_setScanning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("association_active"))))
    {
        bool refVal_setAssociationActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("association_active"))), refVal_setAssociationActive );
        setAssociationActive(refVal_setAssociationActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("current_session_id"))))
    {
        utility::string_t refVal_setCurrentSessionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("current_session_id"))), refVal_setCurrentSessionId );
        setCurrentSessionId(refVal_setCurrentSessionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("active_sessions"))))
    {
        std::vector<utility::string_t> refVal_setActiveSessions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("active_sessions"))), refVal_setActiveSessions );
        setActiveSessions(refVal_setActiveSessions);
    }
    return ok;
}


bool GetNFCStatus_200_response_allOf_data::isReaderAvailable() const
{
    return m_Reader_available;
}

void GetNFCStatus_200_response_allOf_data::setReaderAvailable(bool value)
{
    m_Reader_available = value;
    m_Reader_availableIsSet = true;
}

bool GetNFCStatus_200_response_allOf_data::readerAvailableIsSet() const
{
    return m_Reader_availableIsSet;
}

void GetNFCStatus_200_response_allOf_data::unsetReader_available()
{
    m_Reader_availableIsSet = false;
}
bool GetNFCStatus_200_response_allOf_data::isScanning() const
{
    return m_Scanning;
}

void GetNFCStatus_200_response_allOf_data::setScanning(bool value)
{
    m_Scanning = value;
    m_ScanningIsSet = true;
}

bool GetNFCStatus_200_response_allOf_data::scanningIsSet() const
{
    return m_ScanningIsSet;
}

void GetNFCStatus_200_response_allOf_data::unsetScanning()
{
    m_ScanningIsSet = false;
}
bool GetNFCStatus_200_response_allOf_data::isAssociationActive() const
{
    return m_Association_active;
}

void GetNFCStatus_200_response_allOf_data::setAssociationActive(bool value)
{
    m_Association_active = value;
    m_Association_activeIsSet = true;
}

bool GetNFCStatus_200_response_allOf_data::associationActiveIsSet() const
{
    return m_Association_activeIsSet;
}

void GetNFCStatus_200_response_allOf_data::unsetAssociation_active()
{
    m_Association_activeIsSet = false;
}
utility::string_t GetNFCStatus_200_response_allOf_data::getCurrentSessionId() const
{
    return m_Current_session_id;
}


void GetNFCStatus_200_response_allOf_data::setCurrentSessionId(const utility::string_t& value)
{
    m_Current_session_id = value;
    m_Current_session_idIsSet = true;
}

bool GetNFCStatus_200_response_allOf_data::currentSessionIdIsSet() const
{
    return m_Current_session_idIsSet;
}

void GetNFCStatus_200_response_allOf_data::unsetCurrent_session_id()
{
    m_Current_session_idIsSet = false;
}
std::vector<utility::string_t> GetNFCStatus_200_response_allOf_data::getActiveSessions() const
{
    return m_Active_sessions;
}


void GetNFCStatus_200_response_allOf_data::setActiveSessions(const std::vector<utility::string_t>& value)
{
    m_Active_sessions = value;
    m_Active_sessionsIsSet = true;
}

bool GetNFCStatus_200_response_allOf_data::activeSessionsIsSet() const
{
    return m_Active_sessionsIsSet;
}

void GetNFCStatus_200_response_allOf_data::unsetActive_sessions()
{
    m_Active_sessionsIsSet = false;
}

}
}
}
}


