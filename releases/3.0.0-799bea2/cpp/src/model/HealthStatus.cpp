/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/HealthStatus.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

HealthStatus::HealthStatus()
{
    m_StatusIsSet = false;
    m_ServicesIsSet = false;
    m_Timestamp = 0.0;
    m_TimestampIsSet = false;
    m_Server_seq = 0.0;
    m_Server_seqIsSet = false;
}

HealthStatus::~HealthStatus()
{
}

void HealthStatus::validate()
{
    // TODO: implement validation
}

web::json::value HealthStatus::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StatusIsSet)
    {   
        
        utility::string_t refVal = fromStatusEnum(m_Status);
        val[utility::conversions::to_string_t(_XPLATSTR("status"))] = ModelBase::toJson(refVal);
        
    }
    if(m_ServicesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("services"))] = ModelBase::toJson(m_Services);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Server_seqIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("server_seq"))] = ModelBase::toJson(m_Server_seq);
    }

    return val;
}

bool HealthStatus::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            
            setStatus(toStatusEnum(refVal_setStatus));
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("services"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("services")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HealthStatus_services> refVal_setServices;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServices);
            setServices(refVal_setServices);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            double refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("server_seq")));
        if(!fieldValue.is_null())
        {
            double refVal_setServerSeq;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerSeq);
            setServerSeq(refVal_setServerSeq);
            
        }
    }
    return ok;
}

void HealthStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("status")), fromStatusEnum(m_Status)));
    }
    if(m_ServicesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("services")), m_Services));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_Server_seqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("server_seq")), m_Server_seq));
    }
}

bool HealthStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("status"))), refVal_setStatus );
        setStatus(toStatusEnum(refVal_setStatus));
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("services"))))
    {
        std::shared_ptr<HealthStatus_services> refVal_setServices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("services"))), refVal_setServices );
        setServices(refVal_setServices);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        double refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        double refVal_setServerSeq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))), refVal_setServerSeq );
        setServerSeq(refVal_setServerSeq);
    }
    return ok;
}

HealthStatus::StatusEnum HealthStatus::toStatusEnum(const utility::string_t& value) const
{
    
    if (value == utility::conversions::to_string_t("healthy")) {
        return StatusEnum::HEALTHY;
    }
    
    if (value == utility::conversions::to_string_t("degraded")) {
        return StatusEnum::DEGRADED;
    }
    
    if (value == utility::conversions::to_string_t("unhealthy")) {
        return StatusEnum::UNHEALTHY;
    }
    
    throw std::invalid_argument("Invalid value for conversion to StatusEnum");
}


const utility::string_t HealthStatus::fromStatusEnum(const StatusEnum value) const
{
    switch(value)
    {
        
        case StatusEnum::HEALTHY: return utility::conversions::to_string_t("healthy");
        
        case StatusEnum::DEGRADED: return utility::conversions::to_string_t("degraded");
        
        case StatusEnum::UNHEALTHY: return utility::conversions::to_string_t("unhealthy");
        
    }
}


HealthStatus::StatusEnum HealthStatus::getStatus() const
{
    return m_Status;
}


void HealthStatus::setStatus(const StatusEnum value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool HealthStatus::statusIsSet() const
{
    return m_StatusIsSet;
}

void HealthStatus::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<HealthStatus_services> HealthStatus::getServices() const
{
    return m_Services;
}


void HealthStatus::setServices(const std::shared_ptr<HealthStatus_services>& value)
{
    m_Services = value;
    m_ServicesIsSet = true;
}

bool HealthStatus::servicesIsSet() const
{
    return m_ServicesIsSet;
}

void HealthStatus::unsetServices()
{
    m_ServicesIsSet = false;
}
double HealthStatus::getTimestamp() const
{
    return m_Timestamp;
}

void HealthStatus::setTimestamp(double value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool HealthStatus::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void HealthStatus::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
double HealthStatus::getServerSeq() const
{
    return m_Server_seq;
}

void HealthStatus::setServerSeq(double value)
{
    m_Server_seq = value;
    m_Server_seqIsSet = true;
}

bool HealthStatus::serverSeqIsSet() const
{
    return m_Server_seqIsSet;
}

void HealthStatus::unsetServer_seq()
{
    m_Server_seqIsSet = false;
}

}
}
}
}


