/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SystemInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SystemInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SystemInfo_H_


#include "TombContracts/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class TOMB_API SystemInfo
    : public ModelBase
{
public:
    SystemInfo();
    virtual ~SystemInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// SystemInfo members


    utility::string_t getPlatform() const;
    bool platformIsSet() const;
    void unsetPlatform();
    void setPlatform(const utility::string_t& value);

    utility::string_t getPlatformRelease() const;
    bool platformReleaseIsSet() const;
    void unsetPlatform_release();
    void setPlatformRelease(const utility::string_t& value);

    utility::string_t getPlatformVersion() const;
    bool platformVersionIsSet() const;
    void unsetPlatform_version();
    void setPlatformVersion(const utility::string_t& value);

    utility::string_t getArchitecture() const;
    bool architectureIsSet() const;
    void unsetArchitecture();
    void setArchitecture(const utility::string_t& value);

    utility::string_t getHostname() const;
    bool hostnameIsSet() const;
    void unsetHostname();
    void setHostname(const utility::string_t& value);

    utility::string_t getProcessor() const;
    bool processorIsSet() const;
    void unsetProcessor();
    void setProcessor(const utility::string_t& value);

    int32_t getMemoryTotal() const;
    bool memoryTotalIsSet() const;
    void unsetMemory_total();
    void setMemoryTotal(int32_t value);

    int32_t getMemoryAvailable() const;
    bool memoryAvailableIsSet() const;
    void unsetMemory_available();
    void setMemoryAvailable(int32_t value);

    double getMemoryPercent() const;
    bool memoryPercentIsSet() const;
    void unsetMemory_percent();
    void setMemoryPercent(double value);

    /// <summary>
    /// Server sequence number for state synchronization
    /// </summary>
    double getServerSeq() const;
    bool serverSeqIsSet() const;
    void unsetServer_seq();
    void setServerSeq(double value);


protected:
    utility::string_t m_Platform;
    bool m_PlatformIsSet;

    utility::string_t m_Platform_release;
    bool m_Platform_releaseIsSet;

    utility::string_t m_Platform_version;
    bool m_Platform_versionIsSet;

    utility::string_t m_Architecture;
    bool m_ArchitectureIsSet;

    utility::string_t m_Hostname;
    bool m_HostnameIsSet;

    utility::string_t m_Processor;
    bool m_ProcessorIsSet;

    int32_t m_Memory_total;
    bool m_Memory_totalIsSet;

    int32_t m_Memory_available;
    bool m_Memory_availableIsSet;

    double m_Memory_percent;
    bool m_Memory_percentIsSet;

    double m_Server_seq;
    bool m_Server_seqIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SystemInfo_H_ */
