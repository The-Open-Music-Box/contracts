/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BackendCapabilities.h
 *
 * Backend capability flags that declare what features and formats this backend supports. Allows Flutter app and other clients to auto-configure based on platform constraints. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BackendCapabilities_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BackendCapabilities_H_

#include <stdexcept>

#include "TombContracts/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Backend capability flags that declare what features and formats this backend supports. Allows Flutter app and other clients to auto-configure based on platform constraints. 
/// </summary>
class TOMB_API BackendCapabilities
    : public ModelBase
{
public:
    BackendCapabilities();
    virtual ~BackendCapabilities();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// BackendCapabilities members

    enum class Upload_formatEnum
    {
        RAW_BINARY,
        MULTIPART,
    };
    /// <summary>
    /// Format supported for audio file chunk uploads: - &#x60;raw_binary&#x60;: Stream binary data directly (ESP32 - ESPAsyncWebServer body handler) - &#x60;multipart&#x60;: Multipart form-data with &#39;file&#39; field (RPI - FastAPI File upload) 
    /// </summary>

    Upload_formatEnum toUpload_formatEnum(const utility::string_t& value) const;
    const utility::string_t fromUpload_formatEnum(const Upload_formatEnum value) const;


    /// <summary>
    /// Format supported for audio file chunk uploads: - &#x60;raw_binary&#x60;: Stream binary data directly (ESP32 - ESPAsyncWebServer body handler) - &#x60;multipart&#x60;: Multipart form-data with &#39;file&#39; field (RPI - FastAPI File upload) 
    /// </summary>
    Upload_formatEnum getUploadFormat() const;
    bool uploadFormatIsSet() const;
    void unsetUpload_format();
    void setUploadFormat(const Upload_formatEnum value);

    /// <summary>
    /// Maximum size of a single chunk in bytes. - ESP32: 32768 (32KB) - limited by available heap memory - RPI: 1048576 (1MB) - more resources available 
    /// </summary>
    int32_t getMaxChunkSize() const;
    bool maxChunkSizeIsSet() const;
    void unsetMax_chunk_size();
    void setMaxChunkSize(int32_t value);

    /// <summary>
    /// If the backend can monitor audio playback position in real-time. - ESP32: false (bandwidth/CPU limited) - RPI: true (sufficient resources) 
    /// </summary>
    bool isPlayerMonitoring() const;
    bool playerMonitoringIsSet() const;
    void unsetPlayer_monitoring();
    void setPlayerMonitoring(bool value);

    /// <summary>
    /// If NFC reader (PN532) is detected and functional
    /// </summary>
    bool isNfcAvailable() const;
    bool nfcAvailableIsSet() const;
    void unsetNfc_available();
    void setNfcAvailable(bool value);

    /// <summary>
    /// If LED control (strip/hat) is available
    /// </summary>
    bool isLedControl() const;
    bool ledControlIsSet() const;
    void unsetLed_control();
    void setLedControl(bool value);


protected:
    Upload_formatEnum m_Upload_format;
    bool m_Upload_formatIsSet;

    int32_t m_Max_chunk_size;
    bool m_Max_chunk_sizeIsSet;

    bool m_Player_monitoring;
    bool m_Player_monitoringIsSet;

    bool m_Nfc_available;
    bool m_Nfc_availableIsSet;

    bool m_Led_control;
    bool m_Led_controlIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BackendCapabilities_H_ */
