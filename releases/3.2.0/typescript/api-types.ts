/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/health": {
    /** Health check endpoint */
    get: operations["getHealth"];
  };
  "/api/player/play": {
    /** Start/resume playback */
    post: operations["playerPlay"];
  };
  "/api/player/pause": {
    /** Pause playback */
    post: operations["playerPause"];
  };
  "/api/player/stop": {
    /** Stop playback */
    post: operations["playerStop"];
  };
  "/api/player/next": {
    /** Skip to next track */
    post: operations["playerNext"];
  };
  "/api/player/previous": {
    /** Skip to previous track */
    post: operations["playerPrevious"];
  };
  "/api/player/toggle": {
    /** Toggle play/pause */
    post: operations["playerToggle"];
  };
  "/api/player/status": {
    /** Get current player status */
    get: operations["getPlayerStatus"];
  };
  "/api/player/seek": {
    /** Seek to position in current track */
    post: operations["playerSeek"];
  };
  "/api/player/volume": {
    /** Set volume level */
    post: operations["setVolume"];
  };
  "/api/playlists": {
    /** List all playlists with pagination */
    get: operations["listPlaylists"];
    /** Create new playlist */
    post: operations["createPlaylist"];
  };
  "/api/playlists/{playlist_id}": {
    /** Get specific playlist */
    get: operations["getPlaylist"];
    /** Update playlist */
    put: operations["updatePlaylist"];
    /** Delete playlist */
    delete: operations["deletePlaylist"];
  };
  "/api/playlists/{playlist_id}/start": {
    /** Start playlist playback */
    post: operations["startPlaylist"];
  };
  "/api/playlists/{playlist_id}/reorder": {
    /** Reorder tracks in playlist */
    post: operations["reorderPlaylist"];
  };
  "/api/playlists/{playlist_id}/tracks": {
    /** Remove tracks from playlist */
    delete: operations["removeTracksFromPlaylist"];
  };
  "/api/playlists/move-track": {
    /** Move track between playlists */
    post: operations["moveTrack"];
  };
  "/api/playlists/sync": {
    /** Sync playlist state */
    post: operations["syncPlaylists"];
  };
  "/api/playlists/{playlist_id}/uploads/session": {
    /** Initialize chunked upload session */
    post: operations["initUploadSession"];
  };
  "/api/playlists/{playlist_id}/uploads/{session_id}/chunks/{chunk_index}": {
    /** Upload a file chunk */
    put: operations["uploadChunk"];
  };
  "/api/playlists/{playlist_id}/uploads/{session_id}/finalize": {
    /** Finalize upload and add track to playlist */
    post: operations["finalizeUpload"];
  };
  "/api/playlists/{playlist_id}/uploads/{session_id}": {
    /** Get upload session status */
    get: operations["getUploadStatus"];
  };
  "/api/uploads/sessions": {
    /** List all upload sessions */
    get: operations["listUploadSessions"];
  };
  "/api/uploads/sessions/{session_id}": {
    /** Delete upload session */
    delete: operations["deleteUploadSession"];
  };
  "/api/uploads/cleanup": {
    /** Cleanup stale upload sessions */
    post: operations["cleanupStaleSessions"];
  };
  "/api/nfc/associate": {
    /** Associate NFC tag with playlist */
    post: operations["associateNFC"];
  };
  "/api/nfc/associate/{tag_id}": {
    /** Remove NFC tag association */
    delete: operations["removeNFCAssociation"];
  };
  "/api/nfc/status": {
    /** Get NFC reader status */
    get: operations["getNFCStatus"];
  };
  "/api/nfc/scan": {
    /** Initiate NFC tag scan */
    post: operations["scanNFC"];
  };
  "/api/system/info": {
    /** Get system information */
    get: operations["getSystemInfo"];
  };
  "/api/system/logs": {
    /** Get system logs */
    get: operations["getSystemLogs"];
  };
  "/api/system/restart": {
    /** Restart the system */
    post: operations["restartSystem"];
  };
  "/api/youtube/download": {
    /** Download audio from YouTube URL */
    post: operations["downloadYouTube"];
  };
  "/api/youtube/search": {
    /** Search YouTube videos */
    get: operations["searchYouTube"];
  };
  "/api/youtube/status/{task_id}": {
    /** Get YouTube download task status */
    get: operations["getYouTubeDownloadStatus"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Standardized response wrapper used by all API endpoints */
    UnifiedResponse: {
      /** @enum {string} */
      status: "success" | "error";
      message: string;
      data?: Record<string, never> | unknown[] | null;
      /** @description Client operation ID for operation tracking */
      client_op_id?: string | null;
      /** @description Server sequence number for state synchronization */
      server_seq?: number | null;
      /** @description Unix timestamp in seconds */
      timestamp: number;
      request_id?: string | null;
      /** @enum {string|null} */
      error_type?: "validation_error" | "not_found" | "rate_limit_exceeded" | "service_unavailable" | "internal_error" | "conflict" | "bad_request" | null;
      details?: {
        [key: string]: unknown;
      } | null;
    };
    Track: {
      /** @description Unique track identifier in format: {playlist_id}_{track_number} */
      id: string;
      /** @description Track number in playlist */
      number: number;
      title: string;
      filename: string;
      file_path?: string;
      /**
       * @deprecated
       * @description DEPRECATED: Use duration_ms instead for millisecond precision.
       * Duration in seconds. Will be removed in v4.0.0.
       */
      duration?: number | null;
      /** @description Duration in milliseconds (preferred over duration) */
      duration_ms?: number | null;
      artist?: string | null;
      album?: string | null;
      file_size?: number | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    PlaylistSummary: {
      id: string;
      title: string;
      track_count: number;
      nfc_tag_id?: string | null;
      server_seq?: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    PlaylistDetailed: {
      id: string;
      title: string;
      description?: string;
      tracks: components["schemas"]["Track"][];
      nfc_tag_id?: string | null;
      server_seq?: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      total_duration_ms?: number;
    };
    PlayerState: {
      is_playing: boolean;
      active_playlist_id?: string | null;
      active_playlist_title?: string | null;
      active_track_id?: string | null;
      active_track?: components["schemas"]["Track"] | null;
      /** @description Track number in playlist (lightweight alternative to full active_track) */
      active_track_number?: number | null;
      /** @description Track title (lightweight alternative to full active_track) */
      active_track_title?: string | null;
      /** @description 0-based track index in playlist */
      track_index?: number | null;
      /** @description Total number of tracks in playlist */
      track_count?: number | null;
      /** @description Current playback position in milliseconds */
      position_ms: number;
      /** @description Track duration in milliseconds */
      duration_ms?: number | null;
      can_prev: boolean;
      can_next: boolean;
      volume?: number | null;
      server_seq: number;
    };
    NFCAssociation: {
      tag_id: string;
      playlist_id: string;
      playlist_title: string;
      /** Format: date-time */
      created_at: string;
    };
    SystemInfo: {
      platform: string;
      platform_release: string;
      platform_version: string;
      architecture: string;
      hostname: string;
      processor: string;
      memory_total?: number;
      memory_available?: number;
      memory_percent?: number;
      /** @description Server sequence number for state synchronization */
      server_seq: number;
    };
    HealthStatus: {
      /** @enum {string} */
      status: "healthy" | "degraded" | "unhealthy";
      services: {
        api: boolean;
        audio: boolean;
        nfc: boolean;
        gpio: boolean;
        led_hat: boolean;
        websocket: boolean;
      };
      timestamp: number;
      /** @description Server sequence number for state synchronization */
      server_seq: number;
    };
    UploadSession: {
      session_id: string;
      playlist_id: string;
      filename: string;
      /** @description Total file size in bytes */
      file_size: number;
      /** @description Size of each chunk in bytes */
      chunk_size: number;
      /** @description Total number of chunks */
      total_chunks: number;
      /** @description Optional file hash for verification */
      file_hash?: string | null;
      /** Format: date-time */
      created_at?: string;
    };
    UploadSessionStatus: {
      session_id: string;
      filename: string;
      file_size: number;
      chunks_uploaded: number;
      chunks_total: number;
      progress_percent: number;
      playlist_id?: string | null;
      /** Format: date-time */
      created_at?: string | null;
      /** @enum {string} */
      status: "pending" | "uploading" | "completed" | "error";
    };
    ChunkUploadResult: {
      chunk_index: number;
      received: boolean;
      total_chunks: number;
      progress_percent?: number;
    };
    UploadFinalizeResult: {
      /** @enum {string} */
      status: "success" | "error";
      message: string;
      track?: components["schemas"]["Track"] | null;
    };
    YouTubeSearchResult: {
      video_id: string;
      title: string;
      /** @description Duration in seconds */
      duration: number;
      thumbnail?: string | null;
      channel?: string | null;
    };
    YouTubeDownloadStatus: {
      task_id: string;
      /** @enum {string} */
      status: "pending" | "downloading" | "processing" | "completed" | "failed";
      progress?: number | null;
      error?: string | null;
      track?: components["schemas"]["Track"] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Health check endpoint */
  getHealth: {
    responses: {
      /** @description Health status */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["HealthStatus"];
          };
        };
      };
    };
  };
  /** Start/resume playback */
  playerPlay: {
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Player state after play command */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlayerState"];
          };
        };
      };
    };
  };
  /** Pause playback */
  playerPause: {
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Player state after pause command */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlayerState"];
          };
        };
      };
    };
  };
  /** Stop playback */
  playerStop: {
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Player state after stop command */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlayerState"];
          };
        };
      };
    };
  };
  /** Skip to next track */
  playerNext: {
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Player state after next command */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlayerState"];
          };
        };
      };
    };
  };
  /** Skip to previous track */
  playerPrevious: {
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Player state after previous command */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlayerState"];
          };
        };
      };
    };
  };
  /** Toggle play/pause */
  playerToggle: {
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Player state after toggle command */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlayerState"];
          };
        };
      };
    };
  };
  /** Get current player status */
  getPlayerStatus: {
    responses: {
      /** @description Current player state */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlayerState"];
          };
        };
      };
    };
  };
  /** Seek to position in current track */
  playerSeek: {
    requestBody: {
      content: {
        "application/json": {
          /** @description Position in milliseconds */
          position_ms: number;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Player state after seek */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlayerState"];
          };
        };
      };
    };
  };
  /** Set volume level */
  setVolume: {
    requestBody: {
      content: {
        "application/json": {
          volume: number;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Player state after volume change */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlayerState"];
          };
        };
      };
    };
  };
  /** List all playlists with pagination */
  listPlaylists: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Paginated list of playlists */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              playlists: components["schemas"]["PlaylistSummary"][];
              page: number;
              limit: number;
              total: number;
              total_pages: number;
            };
          };
        };
      };
    };
  };
  /** Create new playlist */
  createPlaylist: {
    requestBody: {
      content: {
        "application/json": {
          title: string;
          description?: string;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Created playlist */
      201: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlaylistDetailed"];
          };
        };
      };
    };
  };
  /** Get specific playlist */
  getPlaylist: {
    parameters: {
      path: {
        playlist_id: string;
      };
    };
    responses: {
      /** @description Playlist details */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["PlaylistDetailed"];
          };
        };
      };
    };
  };
  /** Update playlist */
  updatePlaylist: {
    parameters: {
      path: {
        playlist_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          title?: string;
          description?: string;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Update confirmation */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              client_op_id?: string;
            };
          };
        };
      };
    };
  };
  /** Delete playlist */
  deletePlaylist: {
    parameters: {
      path: {
        playlist_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Playlist deleted successfully */
      204: {
        content: never;
      };
    };
  };
  /** Start playlist playback */
  startPlaylist: {
    parameters: {
      path: {
        playlist_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Playlist started */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              playlist_id?: string;
              started?: boolean;
            };
          };
        };
      };
    };
  };
  /** Reorder tracks in playlist */
  reorderPlaylist: {
    parameters: {
      path: {
        playlist_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Ordered list of track IDs */
          track_ids: string[];
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Playlist reordered successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"];
        };
      };
    };
  };
  /** Remove tracks from playlist */
  removeTracksFromPlaylist: {
    parameters: {
      path: {
        playlist_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description List of track IDs to remove */
          track_ids: string[];
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Tracks removed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"];
        };
      };
    };
  };
  /** Move track between playlists */
  moveTrack: {
    requestBody: {
      content: {
        "application/json": {
          source_playlist_id: string;
          target_playlist_id: string;
          track_id: string;
          target_position?: number | null;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Track moved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"];
        };
      };
    };
  };
  /** Sync playlist state */
  syncPlaylists: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description Last known server sequence number */
          last_sync_seq?: number;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Playlist state synchronized */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              playlists?: components["schemas"]["PlaylistDetailed"][];
              server_seq?: number;
            };
          };
        };
      };
    };
  };
  /** Initialize chunked upload session */
  initUploadSession: {
    parameters: {
      path: {
        playlist_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          filename: string;
          /** @description Total file size in bytes */
          file_size: number;
          /**
           * @description Chunk size in bytes (default 1MB)
           * @default 1048576
           */
          chunk_size?: number;
          file_hash?: string | null;
        };
      };
    };
    responses: {
      /** @description Upload session initialized */
      201: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["UploadSession"];
          };
        };
      };
    };
  };
  /** Upload a file chunk */
  uploadChunk: {
    parameters: {
      path: {
        playlist_id: string;
        session_id: string;
        chunk_index: number;
      };
    };
    requestBody: {
      content: {
        "application/octet-stream": string;
      };
    };
    responses: {
      /** @description Chunk uploaded successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["ChunkUploadResult"];
          };
        };
      };
    };
  };
  /** Finalize upload and add track to playlist */
  finalizeUpload: {
    parameters: {
      path: {
        playlist_id: string;
        session_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          file_hash?: string | null;
          metadata_override?: Record<string, unknown> | null;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Upload finalized and track added */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["UploadFinalizeResult"];
          };
        };
      };
    };
  };
  /** Get upload session status */
  getUploadStatus: {
    parameters: {
      path: {
        playlist_id: string;
        session_id: string;
      };
    };
    responses: {
      /** @description Upload session status */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["UploadSessionStatus"];
          };
        };
      };
    };
  };
  /** List all upload sessions */
  listUploadSessions: {
    parameters: {
      query?: {
        /** @description Filter by upload status */
        status?: "pending" | "uploading" | "completed" | "error";
        /** @description Maximum sessions to return */
        limit?: number;
      };
    };
    responses: {
      /** @description List of upload sessions */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              sessions?: components["schemas"]["UploadSessionStatus"][];
            };
          };
        };
      };
    };
  };
  /** Delete upload session */
  deleteUploadSession: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Upload session deleted */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"];
        };
      };
    };
  };
  /** Cleanup stale upload sessions */
  cleanupStaleSessions: {
    parameters: {
      query?: {
        /** @description Maximum age in hours for cleanup */
        max_age_hours?: number;
      };
    };
    responses: {
      /** @description Stale sessions cleaned up */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              cleaned_sessions?: {
                  session_id?: string;
                  filename?: string;
                  age_hours?: number;
                }[];
            };
          };
        };
      };
    };
  };
  /** Associate NFC tag with playlist */
  associateNFC: {
    requestBody: {
      content: {
        "application/json": {
          playlist_id: string;
          tag_id: string;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description NFC association created */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              association?: components["schemas"]["NFCAssociation"];
            };
          };
        };
      };
    };
  };
  /** Remove NFC tag association */
  removeNFCAssociation: {
    parameters: {
      path: {
        tag_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Association removed */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"];
        };
      };
    };
  };
  /** Get NFC reader status */
  getNFCStatus: {
    responses: {
      /** @description NFC reader status */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & ({
            data?: {
              reader_available: boolean;
              scanning: boolean;
              association_active: boolean;
              current_session_id?: string | null;
              active_sessions: string[];
            };
          });
        };
      };
    };
  };
  /** Initiate NFC tag scan */
  scanNFC: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Scan timeout in seconds
           * @default 30
           */
          timeout?: number;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description NFC scan initiated */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              scanning?: boolean;
              session_id?: string;
            };
          };
        };
      };
    };
  };
  /** Get system information */
  getSystemInfo: {
    responses: {
      /** @description System information */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              system_info: components["schemas"]["SystemInfo"];
              version: string;
              hostname: string;
              uptime: number;
            };
          };
        };
      };
    };
  };
  /** Get system logs */
  getSystemLogs: {
    parameters: {
      query?: {
        /** @description Number of log lines to return */
        lines?: number;
        /** @description Filter by log level */
        level?: "debug" | "info" | "warning" | "error";
      };
    };
    responses: {
      /** @description System logs */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              logs?: string[];
            };
          };
        };
      };
    };
  };
  /** Restart the system */
  restartSystem: {
    requestBody?: {
      content: {
        "application/json": {
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Restart initiated */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              restarting?: boolean;
            };
          };
        };
      };
    };
  };
  /** Download audio from YouTube URL */
  downloadYouTube: {
    requestBody: {
      content: {
        "application/json": {
          /** Format: uri */
          url: string;
          playlist_id: string;
          quality?: string;
          client_op_id?: string;
        };
      };
    };
    responses: {
      /** @description Download task initiated */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              task_id?: string;
              status?: string;
            };
          };
        };
      };
    };
  };
  /** Search YouTube videos */
  searchYouTube: {
    parameters: {
      query: {
        /** @description Search query */
        q: string;
        /** @description Maximum number of results */
        max_results?: number;
      };
    };
    responses: {
      /** @description YouTube search results */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: {
              results?: components["schemas"]["YouTubeSearchResult"][];
            };
          };
        };
      };
    };
  };
  /** Get YouTube download task status */
  getYouTubeDownloadStatus: {
    parameters: {
      path: {
        task_id: string;
      };
    };
    responses: {
      /** @description Download task status */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedResponse"] & {
            data?: components["schemas"]["YouTubeDownloadStatus"];
          };
        };
      };
    };
  };
}
