/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/Track.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Track::Track()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_number = 0;
    m_numberIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_File_path = utility::conversions::to_string_t("");
    m_File_pathIsSet = false;
    m_Duration = 0;
    m_DurationIsSet = false;
    m_Duration_ms = 0;
    m_Duration_msIsSet = false;
    m_Artist = utility::conversions::to_string_t("");
    m_ArtistIsSet = false;
    m_Album = utility::conversions::to_string_t("");
    m_AlbumIsSet = false;
    m_File_size = 0;
    m_File_sizeIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_Updated_at = utility::datetime();
    m_Updated_atIsSet = false;
}

Track::~Track()
{
}

void Track::validate()
{
    // TODO: implement validation
}

web::json::value Track::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_IdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_numberIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("number"))] = ModelBase::toJson(m_number);
    }
    if(m_TitleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_FilenameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("filename"))] = ModelBase::toJson(m_Filename);
    }
    if(m_File_pathIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("file_path"))] = ModelBase::toJson(m_File_path);
    }
    if(m_DurationIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("duration"))] = ModelBase::toJson(m_Duration);
    }
    if(m_Duration_msIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("duration_ms"))] = ModelBase::toJson(m_Duration_ms);
    }
    if(m_ArtistIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("artist"))] = ModelBase::toJson(m_Artist);
    }
    if(m_AlbumIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("album"))] = ModelBase::toJson(m_Album);
    }
    if(m_File_sizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("file_size"))] = ModelBase::toJson(m_File_size);
    }
    if(m_Created_atIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("updated_at"))] = ModelBase::toJson(m_Updated_at);
    }

    return val;
}

bool Track::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("number")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumber);
            setNumber(refVal_setNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("filename"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("filename")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFilename;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilename);
            setFilename(refVal_setFilename);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("file_path"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("file_path")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFilePath;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilePath);
            setFilePath(refVal_setFilePath);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("duration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("duration")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDuration);
            setDuration(refVal_setDuration);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("duration_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("duration_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDurationMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDurationMs);
            setDurationMs(refVal_setDurationMs);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("artist"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("artist")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setArtist;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArtist);
            setArtist(refVal_setArtist);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("album"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("album")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAlbum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAlbum);
            setAlbum(refVal_setAlbum);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("file_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("file_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFileSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileSize);
            setFileSize(refVal_setFileSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("updated_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("updated_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
            
        }
    }
    return ok;
}

void Track::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("id")), m_Id));
    }
    if(m_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("number")), m_number));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("title")), m_Title));
    }
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("filename")), m_Filename));
    }
    if(m_File_pathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("file_path")), m_File_path));
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("duration")), m_Duration));
    }
    if(m_Duration_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("duration_ms")), m_Duration_ms));
    }
    if(m_ArtistIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("artist")), m_Artist));
    }
    if(m_AlbumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("album")), m_Album));
    }
    if(m_File_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("file_size")), m_File_size));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("created_at")), m_Created_at));
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("updated_at")), m_Updated_at));
    }
}

bool Track::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("number"))))
    {
        int32_t refVal_setNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("number"))), refVal_setNumber );
        setNumber(refVal_setNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("filename"))))
    {
        utility::string_t refVal_setFilename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("filename"))), refVal_setFilename );
        setFilename(refVal_setFilename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("file_path"))))
    {
        utility::string_t refVal_setFilePath;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("file_path"))), refVal_setFilePath );
        setFilePath(refVal_setFilePath);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("duration"))))
    {
        int32_t refVal_setDuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("duration"))), refVal_setDuration );
        setDuration(refVal_setDuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("duration_ms"))))
    {
        int32_t refVal_setDurationMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("duration_ms"))), refVal_setDurationMs );
        setDurationMs(refVal_setDurationMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("artist"))))
    {
        utility::string_t refVal_setArtist;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("artist"))), refVal_setArtist );
        setArtist(refVal_setArtist);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("album"))))
    {
        utility::string_t refVal_setAlbum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("album"))), refVal_setAlbum );
        setAlbum(refVal_setAlbum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("file_size"))))
    {
        int32_t refVal_setFileSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("file_size"))), refVal_setFileSize );
        setFileSize(refVal_setFileSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("updated_at"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("updated_at"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    return ok;
}


utility::string_t Track::getId() const
{
    return m_Id;
}


void Track::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Track::idIsSet() const
{
    return m_IdIsSet;
}

void Track::unsetId()
{
    m_IdIsSet = false;
}
int32_t Track::getNumber() const
{
    return m_number;
}

void Track::setNumber(int32_t value)
{
    m_number = value;
    m_numberIsSet = true;
}

bool Track::numberIsSet() const
{
    return m_numberIsSet;
}

void Track::unsetnumber()
{
    m_numberIsSet = false;
}
utility::string_t Track::getTitle() const
{
    return m_Title;
}


void Track::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool Track::titleIsSet() const
{
    return m_TitleIsSet;
}

void Track::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t Track::getFilename() const
{
    return m_Filename;
}


void Track::setFilename(const utility::string_t& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}

bool Track::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void Track::unsetFilename()
{
    m_FilenameIsSet = false;
}
utility::string_t Track::getFilePath() const
{
    return m_File_path;
}


void Track::setFilePath(const utility::string_t& value)
{
    m_File_path = value;
    m_File_pathIsSet = true;
}

bool Track::filePathIsSet() const
{
    return m_File_pathIsSet;
}

void Track::unsetFile_path()
{
    m_File_pathIsSet = false;
}
int32_t Track::getDuration() const
{
    return m_Duration;
}

void Track::setDuration(int32_t value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}

bool Track::durationIsSet() const
{
    return m_DurationIsSet;
}

void Track::unsetDuration()
{
    m_DurationIsSet = false;
}
int32_t Track::getDurationMs() const
{
    return m_Duration_ms;
}

void Track::setDurationMs(int32_t value)
{
    m_Duration_ms = value;
    m_Duration_msIsSet = true;
}

bool Track::durationMsIsSet() const
{
    return m_Duration_msIsSet;
}

void Track::unsetDuration_ms()
{
    m_Duration_msIsSet = false;
}
utility::string_t Track::getArtist() const
{
    return m_Artist;
}


void Track::setArtist(const utility::string_t& value)
{
    m_Artist = value;
    m_ArtistIsSet = true;
}

bool Track::artistIsSet() const
{
    return m_ArtistIsSet;
}

void Track::unsetArtist()
{
    m_ArtistIsSet = false;
}
utility::string_t Track::getAlbum() const
{
    return m_Album;
}


void Track::setAlbum(const utility::string_t& value)
{
    m_Album = value;
    m_AlbumIsSet = true;
}

bool Track::albumIsSet() const
{
    return m_AlbumIsSet;
}

void Track::unsetAlbum()
{
    m_AlbumIsSet = false;
}
int32_t Track::getFileSize() const
{
    return m_File_size;
}

void Track::setFileSize(int32_t value)
{
    m_File_size = value;
    m_File_sizeIsSet = true;
}

bool Track::fileSizeIsSet() const
{
    return m_File_sizeIsSet;
}

void Track::unsetFile_size()
{
    m_File_sizeIsSet = false;
}
utility::datetime Track::getCreatedAt() const
{
    return m_Created_at;
}


void Track::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool Track::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void Track::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::datetime Track::getUpdatedAt() const
{
    return m_Updated_at;
}


void Track::setUpdatedAt(const utility::datetime& value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}

bool Track::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void Track::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}

}
}
}
}


