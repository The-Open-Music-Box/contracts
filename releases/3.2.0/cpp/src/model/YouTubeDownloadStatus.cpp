/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/YouTubeDownloadStatus.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

YouTubeDownloadStatus::YouTubeDownloadStatus()
{
    m_Task_id = utility::conversions::to_string_t("");
    m_Task_idIsSet = false;
    m_StatusIsSet = false;
    m_Progress = 0.0;
    m_ProgressIsSet = false;
    m_Error = utility::conversions::to_string_t("");
    m_ErrorIsSet = false;
    m_TrackIsSet = false;
}

YouTubeDownloadStatus::~YouTubeDownloadStatus()
{
}

void YouTubeDownloadStatus::validate()
{
    // TODO: implement validation
}

web::json::value YouTubeDownloadStatus::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Task_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("task_id"))] = ModelBase::toJson(m_Task_id);
    }
    if(m_StatusIsSet)
    {   
        
        utility::string_t refVal = fromStatusEnum(m_Status);
        val[utility::conversions::to_string_t(_XPLATSTR("status"))] = ModelBase::toJson(refVal);
        
    }
    if(m_ProgressIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("progress"))] = ModelBase::toJson(m_Progress);
    }
    if(m_ErrorIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("error"))] = ModelBase::toJson(m_Error);
    }
    if(m_TrackIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("track"))] = ModelBase::toJson(m_Track);
    }

    return val;
}

bool YouTubeDownloadStatus::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("task_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("task_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTaskId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTaskId);
            setTaskId(refVal_setTaskId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            
            setStatus(toStatusEnum(refVal_setStatus));
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("progress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("progress")));
        if(!fieldValue.is_null())
        {
            double refVal_setProgress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProgress);
            setProgress(refVal_setProgress);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("error")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("track"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("track")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Track> refVal_setTrack;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrack);
            setTrack(refVal_setTrack);
            
        }
    }
    return ok;
}

void YouTubeDownloadStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Task_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("task_id")), m_Task_id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("status")), fromStatusEnum(m_Status)));
    }
    if(m_ProgressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("progress")), m_Progress));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("error")), m_Error));
    }
    if(m_TrackIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("track")), m_Track));
    }
}

bool YouTubeDownloadStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("task_id"))))
    {
        utility::string_t refVal_setTaskId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("task_id"))), refVal_setTaskId );
        setTaskId(refVal_setTaskId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("status"))), refVal_setStatus );
        setStatus(toStatusEnum(refVal_setStatus));
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("progress"))))
    {
        double refVal_setProgress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("progress"))), refVal_setProgress );
        setProgress(refVal_setProgress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("error"))))
    {
        utility::string_t refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("error"))), refVal_setError );
        setError(refVal_setError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("track"))))
    {
        std::shared_ptr<Track> refVal_setTrack;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("track"))), refVal_setTrack );
        setTrack(refVal_setTrack);
    }
    return ok;
}

YouTubeDownloadStatus::StatusEnum YouTubeDownloadStatus::toStatusEnum(const utility::string_t& value) const
{
    
    if (value == utility::conversions::to_string_t("pending")) {
        return StatusEnum::PENDING;
    }
    
    if (value == utility::conversions::to_string_t("downloading")) {
        return StatusEnum::DOWNLOADING;
    }
    
    if (value == utility::conversions::to_string_t("processing")) {
        return StatusEnum::PROCESSING;
    }
    
    if (value == utility::conversions::to_string_t("completed")) {
        return StatusEnum::COMPLETED;
    }
    
    if (value == utility::conversions::to_string_t("failed")) {
        return StatusEnum::FAILED;
    }
    
    throw std::invalid_argument("Invalid value for conversion to StatusEnum");
}


const utility::string_t YouTubeDownloadStatus::fromStatusEnum(const StatusEnum value) const
{
    switch(value)
    {
        
        case StatusEnum::PENDING: return utility::conversions::to_string_t("pending");
        
        case StatusEnum::DOWNLOADING: return utility::conversions::to_string_t("downloading");
        
        case StatusEnum::PROCESSING: return utility::conversions::to_string_t("processing");
        
        case StatusEnum::COMPLETED: return utility::conversions::to_string_t("completed");
        
        case StatusEnum::FAILED: return utility::conversions::to_string_t("failed");
        
    }
}


utility::string_t YouTubeDownloadStatus::getTaskId() const
{
    return m_Task_id;
}


void YouTubeDownloadStatus::setTaskId(const utility::string_t& value)
{
    m_Task_id = value;
    m_Task_idIsSet = true;
}

bool YouTubeDownloadStatus::taskIdIsSet() const
{
    return m_Task_idIsSet;
}

void YouTubeDownloadStatus::unsetTask_id()
{
    m_Task_idIsSet = false;
}
YouTubeDownloadStatus::StatusEnum YouTubeDownloadStatus::getStatus() const
{
    return m_Status;
}


void YouTubeDownloadStatus::setStatus(const StatusEnum value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool YouTubeDownloadStatus::statusIsSet() const
{
    return m_StatusIsSet;
}

void YouTubeDownloadStatus::unsetStatus()
{
    m_StatusIsSet = false;
}
double YouTubeDownloadStatus::getProgress() const
{
    return m_Progress;
}

void YouTubeDownloadStatus::setProgress(double value)
{
    m_Progress = value;
    m_ProgressIsSet = true;
}

bool YouTubeDownloadStatus::progressIsSet() const
{
    return m_ProgressIsSet;
}

void YouTubeDownloadStatus::unsetProgress()
{
    m_ProgressIsSet = false;
}
utility::string_t YouTubeDownloadStatus::getError() const
{
    return m_Error;
}


void YouTubeDownloadStatus::setError(const utility::string_t& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool YouTubeDownloadStatus::errorIsSet() const
{
    return m_ErrorIsSet;
}

void YouTubeDownloadStatus::unsetError()
{
    m_ErrorIsSet = false;
}
std::shared_ptr<Track> YouTubeDownloadStatus::getTrack() const
{
    return m_Track;
}


void YouTubeDownloadStatus::setTrack(const std::shared_ptr<Track>& value)
{
    m_Track = value;
    m_TrackIsSet = true;
}

bool YouTubeDownloadStatus::trackIsSet() const
{
    return m_TrackIsSet;
}

void YouTubeDownloadStatus::unsetTrack()
{
    m_TrackIsSet = false;
}

}
}
}
}


