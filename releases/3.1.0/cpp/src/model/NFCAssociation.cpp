/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/NFCAssociation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

NFCAssociation::NFCAssociation()
{
    m_Tag_id = utility::conversions::to_string_t("");
    m_Tag_idIsSet = false;
    m_Playlist_id = utility::conversions::to_string_t("");
    m_Playlist_idIsSet = false;
    m_Playlist_title = utility::conversions::to_string_t("");
    m_Playlist_titleIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
}

NFCAssociation::~NFCAssociation()
{
}

void NFCAssociation::validate()
{
    // TODO: implement validation
}

web::json::value NFCAssociation::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Tag_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("tag_id"))] = ModelBase::toJson(m_Tag_id);
    }
    if(m_Playlist_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("playlist_id"))] = ModelBase::toJson(m_Playlist_id);
    }
    if(m_Playlist_titleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("playlist_title"))] = ModelBase::toJson(m_Playlist_title);
    }
    if(m_Created_atIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("created_at"))] = ModelBase::toJson(m_Created_at);
    }

    return val;
}

bool NFCAssociation::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("tag_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("tag_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTagId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTagId);
            setTagId(refVal_setTagId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("playlist_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlaylistId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlaylistId);
            setPlaylistId(refVal_setPlaylistId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("playlist_title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("playlist_title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlaylistTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlaylistTitle);
            setPlaylistTitle(refVal_setPlaylistTitle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
            
        }
    }
    return ok;
}

void NFCAssociation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Tag_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("tag_id")), m_Tag_id));
    }
    if(m_Playlist_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("playlist_id")), m_Playlist_id));
    }
    if(m_Playlist_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("playlist_title")), m_Playlist_title));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("created_at")), m_Created_at));
    }
}

bool NFCAssociation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("tag_id"))))
    {
        utility::string_t refVal_setTagId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("tag_id"))), refVal_setTagId );
        setTagId(refVal_setTagId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        utility::string_t refVal_setPlaylistId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))), refVal_setPlaylistId );
        setPlaylistId(refVal_setPlaylistId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("playlist_title"))))
    {
        utility::string_t refVal_setPlaylistTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("playlist_title"))), refVal_setPlaylistTitle );
        setPlaylistTitle(refVal_setPlaylistTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}


utility::string_t NFCAssociation::getTagId() const
{
    return m_Tag_id;
}


void NFCAssociation::setTagId(const utility::string_t& value)
{
    m_Tag_id = value;
    m_Tag_idIsSet = true;
}

bool NFCAssociation::tagIdIsSet() const
{
    return m_Tag_idIsSet;
}

void NFCAssociation::unsetTag_id()
{
    m_Tag_idIsSet = false;
}
utility::string_t NFCAssociation::getPlaylistId() const
{
    return m_Playlist_id;
}


void NFCAssociation::setPlaylistId(const utility::string_t& value)
{
    m_Playlist_id = value;
    m_Playlist_idIsSet = true;
}

bool NFCAssociation::playlistIdIsSet() const
{
    return m_Playlist_idIsSet;
}

void NFCAssociation::unsetPlaylist_id()
{
    m_Playlist_idIsSet = false;
}
utility::string_t NFCAssociation::getPlaylistTitle() const
{
    return m_Playlist_title;
}


void NFCAssociation::setPlaylistTitle(const utility::string_t& value)
{
    m_Playlist_title = value;
    m_Playlist_titleIsSet = true;
}

bool NFCAssociation::playlistTitleIsSet() const
{
    return m_Playlist_titleIsSet;
}

void NFCAssociation::unsetPlaylist_title()
{
    m_Playlist_titleIsSet = false;
}
utility::datetime NFCAssociation::getCreatedAt() const
{
    return m_Created_at;
}


void NFCAssociation::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool NFCAssociation::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void NFCAssociation::unsetCreated_at()
{
    m_Created_atIsSet = false;
}

}
}
}
}


