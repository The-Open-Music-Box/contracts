/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/SystemInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SystemInfo::SystemInfo()
{
    m_Platform = utility::conversions::to_string_t("");
    m_PlatformIsSet = false;
    m_Platform_release = utility::conversions::to_string_t("");
    m_Platform_releaseIsSet = false;
    m_Platform_version = utility::conversions::to_string_t("");
    m_Platform_versionIsSet = false;
    m_Architecture = utility::conversions::to_string_t("");
    m_ArchitectureIsSet = false;
    m_Hostname = utility::conversions::to_string_t("");
    m_HostnameIsSet = false;
    m_Processor = utility::conversions::to_string_t("");
    m_ProcessorIsSet = false;
    m_Memory_total = 0;
    m_Memory_totalIsSet = false;
    m_Memory_available = 0;
    m_Memory_availableIsSet = false;
    m_Memory_percent = 0.0;
    m_Memory_percentIsSet = false;
    m_Server_seq = 0.0;
    m_Server_seqIsSet = false;
}

SystemInfo::~SystemInfo()
{
}

void SystemInfo::validate()
{
    // TODO: implement validation
}

web::json::value SystemInfo::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_PlatformIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("platform"))] = ModelBase::toJson(m_Platform);
    }
    if(m_Platform_releaseIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("platform_release"))] = ModelBase::toJson(m_Platform_release);
    }
    if(m_Platform_versionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("platform_version"))] = ModelBase::toJson(m_Platform_version);
    }
    if(m_ArchitectureIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("architecture"))] = ModelBase::toJson(m_Architecture);
    }
    if(m_HostnameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("hostname"))] = ModelBase::toJson(m_Hostname);
    }
    if(m_ProcessorIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("processor"))] = ModelBase::toJson(m_Processor);
    }
    if(m_Memory_totalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("memory_total"))] = ModelBase::toJson(m_Memory_total);
    }
    if(m_Memory_availableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("memory_available"))] = ModelBase::toJson(m_Memory_available);
    }
    if(m_Memory_percentIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("memory_percent"))] = ModelBase::toJson(m_Memory_percent);
    }
    if(m_Server_seqIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("server_seq"))] = ModelBase::toJson(m_Server_seq);
    }

    return val;
}

bool SystemInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("platform"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("platform")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlatform;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlatform);
            setPlatform(refVal_setPlatform);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("platform_release"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("platform_release")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlatformRelease;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlatformRelease);
            setPlatformRelease(refVal_setPlatformRelease);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("platform_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("platform_version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlatformVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlatformVersion);
            setPlatformVersion(refVal_setPlatformVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("architecture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("architecture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setArchitecture;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArchitecture);
            setArchitecture(refVal_setArchitecture);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("hostname"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("hostname")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHostname;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHostname);
            setHostname(refVal_setHostname);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("processor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("processor")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProcessor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProcessor);
            setProcessor(refVal_setProcessor);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("memory_total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("memory_total")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMemoryTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryTotal);
            setMemoryTotal(refVal_setMemoryTotal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("memory_available"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("memory_available")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMemoryAvailable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryAvailable);
            setMemoryAvailable(refVal_setMemoryAvailable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("memory_percent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("memory_percent")));
        if(!fieldValue.is_null())
        {
            double refVal_setMemoryPercent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPercent);
            setMemoryPercent(refVal_setMemoryPercent);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("server_seq")));
        if(!fieldValue.is_null())
        {
            double refVal_setServerSeq;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerSeq);
            setServerSeq(refVal_setServerSeq);
            
        }
    }
    return ok;
}

void SystemInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_PlatformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("platform")), m_Platform));
    }
    if(m_Platform_releaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("platform_release")), m_Platform_release));
    }
    if(m_Platform_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("platform_version")), m_Platform_version));
    }
    if(m_ArchitectureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("architecture")), m_Architecture));
    }
    if(m_HostnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("hostname")), m_Hostname));
    }
    if(m_ProcessorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("processor")), m_Processor));
    }
    if(m_Memory_totalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("memory_total")), m_Memory_total));
    }
    if(m_Memory_availableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("memory_available")), m_Memory_available));
    }
    if(m_Memory_percentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("memory_percent")), m_Memory_percent));
    }
    if(m_Server_seqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("server_seq")), m_Server_seq));
    }
}

bool SystemInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("platform"))))
    {
        utility::string_t refVal_setPlatform;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("platform"))), refVal_setPlatform );
        setPlatform(refVal_setPlatform);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("platform_release"))))
    {
        utility::string_t refVal_setPlatformRelease;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("platform_release"))), refVal_setPlatformRelease );
        setPlatformRelease(refVal_setPlatformRelease);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("platform_version"))))
    {
        utility::string_t refVal_setPlatformVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("platform_version"))), refVal_setPlatformVersion );
        setPlatformVersion(refVal_setPlatformVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("architecture"))))
    {
        utility::string_t refVal_setArchitecture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("architecture"))), refVal_setArchitecture );
        setArchitecture(refVal_setArchitecture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("hostname"))))
    {
        utility::string_t refVal_setHostname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("hostname"))), refVal_setHostname );
        setHostname(refVal_setHostname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("processor"))))
    {
        utility::string_t refVal_setProcessor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("processor"))), refVal_setProcessor );
        setProcessor(refVal_setProcessor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("memory_total"))))
    {
        int32_t refVal_setMemoryTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("memory_total"))), refVal_setMemoryTotal );
        setMemoryTotal(refVal_setMemoryTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("memory_available"))))
    {
        int32_t refVal_setMemoryAvailable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("memory_available"))), refVal_setMemoryAvailable );
        setMemoryAvailable(refVal_setMemoryAvailable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("memory_percent"))))
    {
        double refVal_setMemoryPercent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("memory_percent"))), refVal_setMemoryPercent );
        setMemoryPercent(refVal_setMemoryPercent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        double refVal_setServerSeq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))), refVal_setServerSeq );
        setServerSeq(refVal_setServerSeq);
    }
    return ok;
}


utility::string_t SystemInfo::getPlatform() const
{
    return m_Platform;
}


void SystemInfo::setPlatform(const utility::string_t& value)
{
    m_Platform = value;
    m_PlatformIsSet = true;
}

bool SystemInfo::platformIsSet() const
{
    return m_PlatformIsSet;
}

void SystemInfo::unsetPlatform()
{
    m_PlatformIsSet = false;
}
utility::string_t SystemInfo::getPlatformRelease() const
{
    return m_Platform_release;
}


void SystemInfo::setPlatformRelease(const utility::string_t& value)
{
    m_Platform_release = value;
    m_Platform_releaseIsSet = true;
}

bool SystemInfo::platformReleaseIsSet() const
{
    return m_Platform_releaseIsSet;
}

void SystemInfo::unsetPlatform_release()
{
    m_Platform_releaseIsSet = false;
}
utility::string_t SystemInfo::getPlatformVersion() const
{
    return m_Platform_version;
}


void SystemInfo::setPlatformVersion(const utility::string_t& value)
{
    m_Platform_version = value;
    m_Platform_versionIsSet = true;
}

bool SystemInfo::platformVersionIsSet() const
{
    return m_Platform_versionIsSet;
}

void SystemInfo::unsetPlatform_version()
{
    m_Platform_versionIsSet = false;
}
utility::string_t SystemInfo::getArchitecture() const
{
    return m_Architecture;
}


void SystemInfo::setArchitecture(const utility::string_t& value)
{
    m_Architecture = value;
    m_ArchitectureIsSet = true;
}

bool SystemInfo::architectureIsSet() const
{
    return m_ArchitectureIsSet;
}

void SystemInfo::unsetArchitecture()
{
    m_ArchitectureIsSet = false;
}
utility::string_t SystemInfo::getHostname() const
{
    return m_Hostname;
}


void SystemInfo::setHostname(const utility::string_t& value)
{
    m_Hostname = value;
    m_HostnameIsSet = true;
}

bool SystemInfo::hostnameIsSet() const
{
    return m_HostnameIsSet;
}

void SystemInfo::unsetHostname()
{
    m_HostnameIsSet = false;
}
utility::string_t SystemInfo::getProcessor() const
{
    return m_Processor;
}


void SystemInfo::setProcessor(const utility::string_t& value)
{
    m_Processor = value;
    m_ProcessorIsSet = true;
}

bool SystemInfo::processorIsSet() const
{
    return m_ProcessorIsSet;
}

void SystemInfo::unsetProcessor()
{
    m_ProcessorIsSet = false;
}
int32_t SystemInfo::getMemoryTotal() const
{
    return m_Memory_total;
}

void SystemInfo::setMemoryTotal(int32_t value)
{
    m_Memory_total = value;
    m_Memory_totalIsSet = true;
}

bool SystemInfo::memoryTotalIsSet() const
{
    return m_Memory_totalIsSet;
}

void SystemInfo::unsetMemory_total()
{
    m_Memory_totalIsSet = false;
}
int32_t SystemInfo::getMemoryAvailable() const
{
    return m_Memory_available;
}

void SystemInfo::setMemoryAvailable(int32_t value)
{
    m_Memory_available = value;
    m_Memory_availableIsSet = true;
}

bool SystemInfo::memoryAvailableIsSet() const
{
    return m_Memory_availableIsSet;
}

void SystemInfo::unsetMemory_available()
{
    m_Memory_availableIsSet = false;
}
double SystemInfo::getMemoryPercent() const
{
    return m_Memory_percent;
}

void SystemInfo::setMemoryPercent(double value)
{
    m_Memory_percent = value;
    m_Memory_percentIsSet = true;
}

bool SystemInfo::memoryPercentIsSet() const
{
    return m_Memory_percentIsSet;
}

void SystemInfo::unsetMemory_percent()
{
    m_Memory_percentIsSet = false;
}
double SystemInfo::getServerSeq() const
{
    return m_Server_seq;
}

void SystemInfo::setServerSeq(double value)
{
    m_Server_seq = value;
    m_Server_seqIsSet = true;
}

bool SystemInfo::serverSeqIsSet() const
{
    return m_Server_seqIsSet;
}

void SystemInfo::unsetServer_seq()
{
    m_Server_seqIsSet = false;
}

}
}
}
}


