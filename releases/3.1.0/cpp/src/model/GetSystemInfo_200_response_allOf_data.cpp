/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/GetSystemInfo_200_response_allOf_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GetSystemInfo_200_response_allOf_data::GetSystemInfo_200_response_allOf_data()
{
    m_System_infoIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_Hostname = utility::conversions::to_string_t("");
    m_HostnameIsSet = false;
    m_Uptime = 0.0;
    m_UptimeIsSet = false;
}

GetSystemInfo_200_response_allOf_data::~GetSystemInfo_200_response_allOf_data()
{
}

void GetSystemInfo_200_response_allOf_data::validate()
{
    // TODO: implement validation
}

web::json::value GetSystemInfo_200_response_allOf_data::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_System_infoIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("system_info"))] = ModelBase::toJson(m_System_info);
    }
    if(m_VersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_HostnameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("hostname"))] = ModelBase::toJson(m_Hostname);
    }
    if(m_UptimeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("uptime"))] = ModelBase::toJson(m_Uptime);
    }

    return val;
}

bool GetSystemInfo_200_response_allOf_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("system_info"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("system_info")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SystemInfo> refVal_setSystemInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystemInfo);
            setSystemInfo(refVal_setSystemInfo);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("hostname"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("hostname")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHostname;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHostname);
            setHostname(refVal_setHostname);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("uptime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("uptime")));
        if(!fieldValue.is_null())
        {
            double refVal_setUptime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUptime);
            setUptime(refVal_setUptime);
            
        }
    }
    return ok;
}

void GetSystemInfo_200_response_allOf_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_System_infoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("system_info")), m_System_info));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("version")), m_Version));
    }
    if(m_HostnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("hostname")), m_Hostname));
    }
    if(m_UptimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("uptime")), m_Uptime));
    }
}

bool GetSystemInfo_200_response_allOf_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("system_info"))))
    {
        std::shared_ptr<SystemInfo> refVal_setSystemInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("system_info"))), refVal_setSystemInfo );
        setSystemInfo(refVal_setSystemInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("hostname"))))
    {
        utility::string_t refVal_setHostname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("hostname"))), refVal_setHostname );
        setHostname(refVal_setHostname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("uptime"))))
    {
        double refVal_setUptime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("uptime"))), refVal_setUptime );
        setUptime(refVal_setUptime);
    }
    return ok;
}


std::shared_ptr<SystemInfo> GetSystemInfo_200_response_allOf_data::getSystemInfo() const
{
    return m_System_info;
}


void GetSystemInfo_200_response_allOf_data::setSystemInfo(const std::shared_ptr<SystemInfo>& value)
{
    m_System_info = value;
    m_System_infoIsSet = true;
}

bool GetSystemInfo_200_response_allOf_data::systemInfoIsSet() const
{
    return m_System_infoIsSet;
}

void GetSystemInfo_200_response_allOf_data::unsetSystem_info()
{
    m_System_infoIsSet = false;
}
utility::string_t GetSystemInfo_200_response_allOf_data::getVersion() const
{
    return m_Version;
}


void GetSystemInfo_200_response_allOf_data::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool GetSystemInfo_200_response_allOf_data::versionIsSet() const
{
    return m_VersionIsSet;
}

void GetSystemInfo_200_response_allOf_data::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t GetSystemInfo_200_response_allOf_data::getHostname() const
{
    return m_Hostname;
}


void GetSystemInfo_200_response_allOf_data::setHostname(const utility::string_t& value)
{
    m_Hostname = value;
    m_HostnameIsSet = true;
}

bool GetSystemInfo_200_response_allOf_data::hostnameIsSet() const
{
    return m_HostnameIsSet;
}

void GetSystemInfo_200_response_allOf_data::unsetHostname()
{
    m_HostnameIsSet = false;
}
double GetSystemInfo_200_response_allOf_data::getUptime() const
{
    return m_Uptime;
}

void GetSystemInfo_200_response_allOf_data::setUptime(double value)
{
    m_Uptime = value;
    m_UptimeIsSet = true;
}

bool GetSystemInfo_200_response_allOf_data::uptimeIsSet() const
{
    return m_UptimeIsSet;
}

void GetSystemInfo_200_response_allOf_data::unsetUptime()
{
    m_UptimeIsSet = false;
}

}
}
}
}


