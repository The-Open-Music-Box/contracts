/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/PlayerPlay_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PlayerPlay_200_response::PlayerPlay_200_response()
{
    m_StatusIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_DataIsSet = false;
    m_Client_op_id = utility::conversions::to_string_t("");
    m_Client_op_idIsSet = false;
    m_Server_seq = 0.0;
    m_Server_seqIsSet = false;
    m_Timestamp = 0.0;
    m_TimestampIsSet = false;
    m_Request_id = utility::conversions::to_string_t("");
    m_Request_idIsSet = false;
    m_Error_typeIsSet = false;
    m_DetailsIsSet = false;
}

PlayerPlay_200_response::~PlayerPlay_200_response()
{
}

void PlayerPlay_200_response::validate()
{
    // TODO: implement validation
}

web::json::value PlayerPlay_200_response::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StatusIsSet)
    {   
        
        utility::string_t refVal = fromStatusEnum(m_Status);
        val[utility::conversions::to_string_t(_XPLATSTR("status"))] = ModelBase::toJson(refVal);
        
    }
    if(m_MessageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_DataIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data"))] = ModelBase::toJson(m_Data);
    }
    if(m_Client_op_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("client_op_id"))] = ModelBase::toJson(m_Client_op_id);
    }
    if(m_Server_seqIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("server_seq"))] = ModelBase::toJson(m_Server_seq);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Request_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("request_id"))] = ModelBase::toJson(m_Request_id);
    }
    if(m_Error_typeIsSet)
    {   
        
        utility::string_t refVal = fromError_typeEnum(m_Error_type);
        val[utility::conversions::to_string_t(_XPLATSTR("error_type"))] = ModelBase::toJson(refVal);
        
    }
    if(m_DetailsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("details"))] = ModelBase::toJson(m_Details);
    }

    return val;
}

bool PlayerPlay_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            
            setStatus(toStatusEnum(refVal_setStatus));
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlayerState> refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("client_op_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientOpId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientOpId);
            setClientOpId(refVal_setClientOpId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("server_seq")));
        if(!fieldValue.is_null())
        {
            double refVal_setServerSeq;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerSeq);
            setServerSeq(refVal_setServerSeq);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            double refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("request_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("request_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRequestId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequestId);
            setRequestId(refVal_setRequestId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("error_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("error_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorType);
            
            setErrorType(toError_typeEnum(refVal_setErrorType));
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("details"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("details")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetails);
            setDetails(refVal_setDetails);
            
        }
    }
    return ok;
}

void PlayerPlay_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("status")), fromStatusEnum(m_Status)));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("message")), m_Message));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data")), m_Data));
    }
    if(m_Client_op_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("client_op_id")), m_Client_op_id));
    }
    if(m_Server_seqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("server_seq")), m_Server_seq));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_Request_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("request_id")), m_Request_id));
    }
    if(m_Error_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("error_type")), fromError_typeEnum(m_Error_type)));
    }
    if(m_DetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("details")), m_Details));
    }
}

bool PlayerPlay_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("status"))), refVal_setStatus );
        setStatus(toStatusEnum(refVal_setStatus));
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data"))))
    {
        std::shared_ptr<PlayerState> refVal_setData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data"))), refVal_setData );
        setData(refVal_setData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))))
    {
        utility::string_t refVal_setClientOpId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))), refVal_setClientOpId );
        setClientOpId(refVal_setClientOpId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        double refVal_setServerSeq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))), refVal_setServerSeq );
        setServerSeq(refVal_setServerSeq);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        double refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("request_id"))))
    {
        utility::string_t refVal_setRequestId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("request_id"))), refVal_setRequestId );
        setRequestId(refVal_setRequestId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("error_type"))))
    {
        utility::string_t refVal_setErrorType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("error_type"))), refVal_setErrorType );
        setErrorType(toError_typeEnum(refVal_setErrorType));
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("details"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("details"))), refVal_setDetails );
        setDetails(refVal_setDetails);
    }
    return ok;
}

PlayerPlay_200_response::StatusEnum PlayerPlay_200_response::toStatusEnum(const utility::string_t& value) const
{
    
    if (value == utility::conversions::to_string_t("success")) {
        return StatusEnum::SUCCESS;
    }
    
    if (value == utility::conversions::to_string_t("error")) {
        return StatusEnum::ERROR;
    }
    
    throw std::invalid_argument("Invalid value for conversion to StatusEnum");
}


const utility::string_t PlayerPlay_200_response::fromStatusEnum(const StatusEnum value) const
{
    switch(value)
    {
        
        case StatusEnum::SUCCESS: return utility::conversions::to_string_t("success");
        
        case StatusEnum::ERROR: return utility::conversions::to_string_t("error");
        
    }
}

PlayerPlay_200_response::Error_typeEnum PlayerPlay_200_response::toError_typeEnum(const utility::string_t& value) const
{
    
    if (value == utility::conversions::to_string_t("validation_error")) {
        return Error_typeEnum::VALIDATION_ERROR;
    }
    
    if (value == utility::conversions::to_string_t("not_found")) {
        return Error_typeEnum::NOT_FOUND;
    }
    
    if (value == utility::conversions::to_string_t("rate_limit_exceeded")) {
        return Error_typeEnum::RATE_LIMIT_EXCEEDED;
    }
    
    if (value == utility::conversions::to_string_t("service_unavailable")) {
        return Error_typeEnum::SERVICE_UNAVAILABLE;
    }
    
    if (value == utility::conversions::to_string_t("internal_error")) {
        return Error_typeEnum::INTERNAL_ERROR;
    }
    
    if (value == utility::conversions::to_string_t("conflict")) {
        return Error_typeEnum::CONFLICT;
    }
    
    if (value == utility::conversions::to_string_t("bad_request")) {
        return Error_typeEnum::BAD_REQUEST;
    }
    
    throw std::invalid_argument("Invalid value for conversion to Error_typeEnum");
}


const utility::string_t PlayerPlay_200_response::fromError_typeEnum(const Error_typeEnum value) const
{
    switch(value)
    {
        
        case Error_typeEnum::VALIDATION_ERROR: return utility::conversions::to_string_t("validation_error");
        
        case Error_typeEnum::NOT_FOUND: return utility::conversions::to_string_t("not_found");
        
        case Error_typeEnum::RATE_LIMIT_EXCEEDED: return utility::conversions::to_string_t("rate_limit_exceeded");
        
        case Error_typeEnum::SERVICE_UNAVAILABLE: return utility::conversions::to_string_t("service_unavailable");
        
        case Error_typeEnum::INTERNAL_ERROR: return utility::conversions::to_string_t("internal_error");
        
        case Error_typeEnum::CONFLICT: return utility::conversions::to_string_t("conflict");
        
        case Error_typeEnum::BAD_REQUEST: return utility::conversions::to_string_t("bad_request");
        
    }
}


PlayerPlay_200_response::StatusEnum PlayerPlay_200_response::getStatus() const
{
    return m_Status;
}


void PlayerPlay_200_response::setStatus(const StatusEnum value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool PlayerPlay_200_response::statusIsSet() const
{
    return m_StatusIsSet;
}

void PlayerPlay_200_response::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t PlayerPlay_200_response::getMessage() const
{
    return m_Message;
}


void PlayerPlay_200_response::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool PlayerPlay_200_response::messageIsSet() const
{
    return m_MessageIsSet;
}

void PlayerPlay_200_response::unsetMessage()
{
    m_MessageIsSet = false;
}
std::shared_ptr<PlayerState> PlayerPlay_200_response::getData() const
{
    return m_Data;
}


void PlayerPlay_200_response::setData(const std::shared_ptr<PlayerState>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool PlayerPlay_200_response::dataIsSet() const
{
    return m_DataIsSet;
}

void PlayerPlay_200_response::unsetData()
{
    m_DataIsSet = false;
}
utility::string_t PlayerPlay_200_response::getClientOpId() const
{
    return m_Client_op_id;
}


void PlayerPlay_200_response::setClientOpId(const utility::string_t& value)
{
    m_Client_op_id = value;
    m_Client_op_idIsSet = true;
}

bool PlayerPlay_200_response::clientOpIdIsSet() const
{
    return m_Client_op_idIsSet;
}

void PlayerPlay_200_response::unsetClient_op_id()
{
    m_Client_op_idIsSet = false;
}
double PlayerPlay_200_response::getServerSeq() const
{
    return m_Server_seq;
}

void PlayerPlay_200_response::setServerSeq(double value)
{
    m_Server_seq = value;
    m_Server_seqIsSet = true;
}

bool PlayerPlay_200_response::serverSeqIsSet() const
{
    return m_Server_seqIsSet;
}

void PlayerPlay_200_response::unsetServer_seq()
{
    m_Server_seqIsSet = false;
}
double PlayerPlay_200_response::getTimestamp() const
{
    return m_Timestamp;
}

void PlayerPlay_200_response::setTimestamp(double value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool PlayerPlay_200_response::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void PlayerPlay_200_response::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t PlayerPlay_200_response::getRequestId() const
{
    return m_Request_id;
}


void PlayerPlay_200_response::setRequestId(const utility::string_t& value)
{
    m_Request_id = value;
    m_Request_idIsSet = true;
}

bool PlayerPlay_200_response::requestIdIsSet() const
{
    return m_Request_idIsSet;
}

void PlayerPlay_200_response::unsetRequest_id()
{
    m_Request_idIsSet = false;
}
PlayerPlay_200_response::Error_typeEnum PlayerPlay_200_response::getErrorType() const
{
    return m_Error_type;
}


void PlayerPlay_200_response::setErrorType(const Error_typeEnum value)
{
    m_Error_type = value;
    m_Error_typeIsSet = true;
}

bool PlayerPlay_200_response::errorTypeIsSet() const
{
    return m_Error_typeIsSet;
}

void PlayerPlay_200_response::unsetError_type()
{
    m_Error_typeIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<AnyType>> PlayerPlay_200_response::getDetails() const
{
    return m_Details;
}


void PlayerPlay_200_response::setDetails(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}

bool PlayerPlay_200_response::detailsIsSet() const
{
    return m_DetailsIsSet;
}

void PlayerPlay_200_response::unsetDetails()
{
    m_DetailsIsSet = false;
}

}
}
}
}


