/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/PlaylistDetailed.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PlaylistDetailed::PlaylistDetailed()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_TracksIsSet = false;
    m_Nfc_tag_id = utility::conversions::to_string_t("");
    m_Nfc_tag_idIsSet = false;
    m_Server_seq = 0.0;
    m_Server_seqIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_Updated_at = utility::datetime();
    m_Updated_atIsSet = false;
    m_Total_duration_ms = 0;
    m_Total_duration_msIsSet = false;
}

PlaylistDetailed::~PlaylistDetailed()
{
}

void PlaylistDetailed::validate()
{
    // TODO: implement validation
}

web::json::value PlaylistDetailed::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_IdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_TracksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("tracks"))] = ModelBase::toJson(m_Tracks);
    }
    if(m_Nfc_tag_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("nfc_tag_id"))] = ModelBase::toJson(m_Nfc_tag_id);
    }
    if(m_Server_seqIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("server_seq"))] = ModelBase::toJson(m_Server_seq);
    }
    if(m_Created_atIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("updated_at"))] = ModelBase::toJson(m_Updated_at);
    }
    if(m_Total_duration_msIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("total_duration_ms"))] = ModelBase::toJson(m_Total_duration_ms);
    }

    return val;
}

bool PlaylistDetailed::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("tracks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("tracks")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Track>> refVal_setTracks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTracks);
            setTracks(refVal_setTracks);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("nfc_tag_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("nfc_tag_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNfcTagId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNfcTagId);
            setNfcTagId(refVal_setNfcTagId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("server_seq")));
        if(!fieldValue.is_null())
        {
            double refVal_setServerSeq;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerSeq);
            setServerSeq(refVal_setServerSeq);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("updated_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("updated_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("total_duration_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("total_duration_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalDurationMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalDurationMs);
            setTotalDurationMs(refVal_setTotalDurationMs);
            
        }
    }
    return ok;
}

void PlaylistDetailed::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("id")), m_Id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("title")), m_Title));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("description")), m_Description));
    }
    if(m_TracksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("tracks")), m_Tracks));
    }
    if(m_Nfc_tag_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("nfc_tag_id")), m_Nfc_tag_id));
    }
    if(m_Server_seqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("server_seq")), m_Server_seq));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("created_at")), m_Created_at));
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("updated_at")), m_Updated_at));
    }
    if(m_Total_duration_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("total_duration_ms")), m_Total_duration_ms));
    }
}

bool PlaylistDetailed::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("tracks"))))
    {
        std::vector<std::shared_ptr<Track>> refVal_setTracks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("tracks"))), refVal_setTracks );
        setTracks(refVal_setTracks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("nfc_tag_id"))))
    {
        utility::string_t refVal_setNfcTagId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("nfc_tag_id"))), refVal_setNfcTagId );
        setNfcTagId(refVal_setNfcTagId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        double refVal_setServerSeq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))), refVal_setServerSeq );
        setServerSeq(refVal_setServerSeq);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("updated_at"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("updated_at"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("total_duration_ms"))))
    {
        int32_t refVal_setTotalDurationMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("total_duration_ms"))), refVal_setTotalDurationMs );
        setTotalDurationMs(refVal_setTotalDurationMs);
    }
    return ok;
}


utility::string_t PlaylistDetailed::getId() const
{
    return m_Id;
}


void PlaylistDetailed::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PlaylistDetailed::idIsSet() const
{
    return m_IdIsSet;
}

void PlaylistDetailed::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t PlaylistDetailed::getTitle() const
{
    return m_Title;
}


void PlaylistDetailed::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool PlaylistDetailed::titleIsSet() const
{
    return m_TitleIsSet;
}

void PlaylistDetailed::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t PlaylistDetailed::getDescription() const
{
    return m_Description;
}


void PlaylistDetailed::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool PlaylistDetailed::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void PlaylistDetailed::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<std::shared_ptr<Track>> PlaylistDetailed::getTracks() const
{
    return m_Tracks;
}


void PlaylistDetailed::setTracks(const std::vector<std::shared_ptr<Track>>& value)
{
    m_Tracks = value;
    m_TracksIsSet = true;
}

bool PlaylistDetailed::tracksIsSet() const
{
    return m_TracksIsSet;
}

void PlaylistDetailed::unsetTracks()
{
    m_TracksIsSet = false;
}
utility::string_t PlaylistDetailed::getNfcTagId() const
{
    return m_Nfc_tag_id;
}


void PlaylistDetailed::setNfcTagId(const utility::string_t& value)
{
    m_Nfc_tag_id = value;
    m_Nfc_tag_idIsSet = true;
}

bool PlaylistDetailed::nfcTagIdIsSet() const
{
    return m_Nfc_tag_idIsSet;
}

void PlaylistDetailed::unsetNfc_tag_id()
{
    m_Nfc_tag_idIsSet = false;
}
double PlaylistDetailed::getServerSeq() const
{
    return m_Server_seq;
}

void PlaylistDetailed::setServerSeq(double value)
{
    m_Server_seq = value;
    m_Server_seqIsSet = true;
}

bool PlaylistDetailed::serverSeqIsSet() const
{
    return m_Server_seqIsSet;
}

void PlaylistDetailed::unsetServer_seq()
{
    m_Server_seqIsSet = false;
}
utility::datetime PlaylistDetailed::getCreatedAt() const
{
    return m_Created_at;
}


void PlaylistDetailed::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool PlaylistDetailed::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void PlaylistDetailed::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::datetime PlaylistDetailed::getUpdatedAt() const
{
    return m_Updated_at;
}


void PlaylistDetailed::setUpdatedAt(const utility::datetime& value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}

bool PlaylistDetailed::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void PlaylistDetailed::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}
int32_t PlaylistDetailed::getTotalDurationMs() const
{
    return m_Total_duration_ms;
}

void PlaylistDetailed::setTotalDurationMs(int32_t value)
{
    m_Total_duration_ms = value;
    m_Total_duration_msIsSet = true;
}

bool PlaylistDetailed::totalDurationMsIsSet() const
{
    return m_Total_duration_msIsSet;
}

void PlaylistDetailed::unsetTotal_duration_ms()
{
    m_Total_duration_msIsSet = false;
}

}
}
}
}


