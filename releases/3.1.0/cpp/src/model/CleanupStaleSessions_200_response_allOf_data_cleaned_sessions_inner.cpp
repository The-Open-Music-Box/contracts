/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner()
{
    m_Session_id = utility::conversions::to_string_t("");
    m_Session_idIsSet = false;
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_Age_hours = 0.0;
    m_Age_hoursIsSet = false;
}

CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::~CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner()
{
}

void CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::validate()
{
    // TODO: implement validation
}

web::json::value CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Session_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("session_id"))] = ModelBase::toJson(m_Session_id);
    }
    if(m_FilenameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("filename"))] = ModelBase::toJson(m_Filename);
    }
    if(m_Age_hoursIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("age_hours"))] = ModelBase::toJson(m_Age_hours);
    }

    return val;
}

bool CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("session_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("session_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSessionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionId);
            setSessionId(refVal_setSessionId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("filename"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("filename")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFilename;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilename);
            setFilename(refVal_setFilename);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("age_hours"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("age_hours")));
        if(!fieldValue.is_null())
        {
            double refVal_setAgeHours;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgeHours);
            setAgeHours(refVal_setAgeHours);
            
        }
    }
    return ok;
}

void CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Session_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("session_id")), m_Session_id));
    }
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("filename")), m_Filename));
    }
    if(m_Age_hoursIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("age_hours")), m_Age_hours));
    }
}

bool CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("session_id"))))
    {
        utility::string_t refVal_setSessionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("session_id"))), refVal_setSessionId );
        setSessionId(refVal_setSessionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("filename"))))
    {
        utility::string_t refVal_setFilename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("filename"))), refVal_setFilename );
        setFilename(refVal_setFilename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("age_hours"))))
    {
        double refVal_setAgeHours;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("age_hours"))), refVal_setAgeHours );
        setAgeHours(refVal_setAgeHours);
    }
    return ok;
}


utility::string_t CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::getSessionId() const
{
    return m_Session_id;
}


void CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::setSessionId(const utility::string_t& value)
{
    m_Session_id = value;
    m_Session_idIsSet = true;
}

bool CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::sessionIdIsSet() const
{
    return m_Session_idIsSet;
}

void CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::unsetSession_id()
{
    m_Session_idIsSet = false;
}
utility::string_t CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::getFilename() const
{
    return m_Filename;
}


void CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::setFilename(const utility::string_t& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}

bool CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::unsetFilename()
{
    m_FilenameIsSet = false;
}
double CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::getAgeHours() const
{
    return m_Age_hours;
}

void CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::setAgeHours(double value)
{
    m_Age_hours = value;
    m_Age_hoursIsSet = true;
}

bool CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::ageHoursIsSet() const
{
    return m_Age_hoursIsSet;
}

void CleanupStaleSessions_200_response_allOf_data_cleaned_sessions_inner::unsetAge_hours()
{
    m_Age_hoursIsSet = false;
}

}
}
}
}


