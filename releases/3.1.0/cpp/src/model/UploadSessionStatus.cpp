/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/UploadSessionStatus.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

UploadSessionStatus::UploadSessionStatus()
{
    m_Session_id = utility::conversions::to_string_t("");
    m_Session_idIsSet = false;
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_File_size = 0;
    m_File_sizeIsSet = false;
    m_Chunks_uploaded = 0;
    m_Chunks_uploadedIsSet = false;
    m_Chunks_total = 0;
    m_Chunks_totalIsSet = false;
    m_Progress_percent = 0.0;
    m_Progress_percentIsSet = false;
    m_Playlist_id = utility::conversions::to_string_t("");
    m_Playlist_idIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_StatusIsSet = false;
}

UploadSessionStatus::~UploadSessionStatus()
{
}

void UploadSessionStatus::validate()
{
    // TODO: implement validation
}

web::json::value UploadSessionStatus::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Session_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("session_id"))] = ModelBase::toJson(m_Session_id);
    }
    if(m_FilenameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("filename"))] = ModelBase::toJson(m_Filename);
    }
    if(m_File_sizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("file_size"))] = ModelBase::toJson(m_File_size);
    }
    if(m_Chunks_uploadedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("chunks_uploaded"))] = ModelBase::toJson(m_Chunks_uploaded);
    }
    if(m_Chunks_totalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("chunks_total"))] = ModelBase::toJson(m_Chunks_total);
    }
    if(m_Progress_percentIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("progress_percent"))] = ModelBase::toJson(m_Progress_percent);
    }
    if(m_Playlist_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("playlist_id"))] = ModelBase::toJson(m_Playlist_id);
    }
    if(m_Created_atIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_StatusIsSet)
    {   
        
        utility::string_t refVal = fromStatusEnum(m_Status);
        val[utility::conversions::to_string_t(_XPLATSTR("status"))] = ModelBase::toJson(refVal);
        
    }

    return val;
}

bool UploadSessionStatus::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("session_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("session_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSessionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionId);
            setSessionId(refVal_setSessionId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("filename"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("filename")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFilename;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilename);
            setFilename(refVal_setFilename);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("file_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("file_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFileSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileSize);
            setFileSize(refVal_setFileSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("chunks_uploaded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("chunks_uploaded")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setChunksUploaded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChunksUploaded);
            setChunksUploaded(refVal_setChunksUploaded);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("chunks_total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("chunks_total")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setChunksTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChunksTotal);
            setChunksTotal(refVal_setChunksTotal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("progress_percent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("progress_percent")));
        if(!fieldValue.is_null())
        {
            double refVal_setProgressPercent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProgressPercent);
            setProgressPercent(refVal_setProgressPercent);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("playlist_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlaylistId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlaylistId);
            setPlaylistId(refVal_setPlaylistId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            
            setStatus(toStatusEnum(refVal_setStatus));
            
        }
    }
    return ok;
}

void UploadSessionStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Session_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("session_id")), m_Session_id));
    }
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("filename")), m_Filename));
    }
    if(m_File_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("file_size")), m_File_size));
    }
    if(m_Chunks_uploadedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("chunks_uploaded")), m_Chunks_uploaded));
    }
    if(m_Chunks_totalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("chunks_total")), m_Chunks_total));
    }
    if(m_Progress_percentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("progress_percent")), m_Progress_percent));
    }
    if(m_Playlist_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("playlist_id")), m_Playlist_id));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("created_at")), m_Created_at));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("status")), fromStatusEnum(m_Status)));
    }
}

bool UploadSessionStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("session_id"))))
    {
        utility::string_t refVal_setSessionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("session_id"))), refVal_setSessionId );
        setSessionId(refVal_setSessionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("filename"))))
    {
        utility::string_t refVal_setFilename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("filename"))), refVal_setFilename );
        setFilename(refVal_setFilename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("file_size"))))
    {
        int32_t refVal_setFileSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("file_size"))), refVal_setFileSize );
        setFileSize(refVal_setFileSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("chunks_uploaded"))))
    {
        int32_t refVal_setChunksUploaded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("chunks_uploaded"))), refVal_setChunksUploaded );
        setChunksUploaded(refVal_setChunksUploaded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("chunks_total"))))
    {
        int32_t refVal_setChunksTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("chunks_total"))), refVal_setChunksTotal );
        setChunksTotal(refVal_setChunksTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("progress_percent"))))
    {
        double refVal_setProgressPercent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("progress_percent"))), refVal_setProgressPercent );
        setProgressPercent(refVal_setProgressPercent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))))
    {
        utility::string_t refVal_setPlaylistId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("playlist_id"))), refVal_setPlaylistId );
        setPlaylistId(refVal_setPlaylistId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("status"))), refVal_setStatus );
        setStatus(toStatusEnum(refVal_setStatus));
    }
    return ok;
}

UploadSessionStatus::StatusEnum UploadSessionStatus::toStatusEnum(const utility::string_t& value) const
{
    
    if (value == utility::conversions::to_string_t("pending")) {
        return StatusEnum::PENDING;
    }
    
    if (value == utility::conversions::to_string_t("uploading")) {
        return StatusEnum::UPLOADING;
    }
    
    if (value == utility::conversions::to_string_t("completed")) {
        return StatusEnum::COMPLETED;
    }
    
    if (value == utility::conversions::to_string_t("error")) {
        return StatusEnum::ERROR;
    }
    
    throw std::invalid_argument("Invalid value for conversion to StatusEnum");
}


const utility::string_t UploadSessionStatus::fromStatusEnum(const StatusEnum value) const
{
    switch(value)
    {
        
        case StatusEnum::PENDING: return utility::conversions::to_string_t("pending");
        
        case StatusEnum::UPLOADING: return utility::conversions::to_string_t("uploading");
        
        case StatusEnum::COMPLETED: return utility::conversions::to_string_t("completed");
        
        case StatusEnum::ERROR: return utility::conversions::to_string_t("error");
        
    }
}


utility::string_t UploadSessionStatus::getSessionId() const
{
    return m_Session_id;
}


void UploadSessionStatus::setSessionId(const utility::string_t& value)
{
    m_Session_id = value;
    m_Session_idIsSet = true;
}

bool UploadSessionStatus::sessionIdIsSet() const
{
    return m_Session_idIsSet;
}

void UploadSessionStatus::unsetSession_id()
{
    m_Session_idIsSet = false;
}
utility::string_t UploadSessionStatus::getFilename() const
{
    return m_Filename;
}


void UploadSessionStatus::setFilename(const utility::string_t& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}

bool UploadSessionStatus::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void UploadSessionStatus::unsetFilename()
{
    m_FilenameIsSet = false;
}
int32_t UploadSessionStatus::getFileSize() const
{
    return m_File_size;
}

void UploadSessionStatus::setFileSize(int32_t value)
{
    m_File_size = value;
    m_File_sizeIsSet = true;
}

bool UploadSessionStatus::fileSizeIsSet() const
{
    return m_File_sizeIsSet;
}

void UploadSessionStatus::unsetFile_size()
{
    m_File_sizeIsSet = false;
}
int32_t UploadSessionStatus::getChunksUploaded() const
{
    return m_Chunks_uploaded;
}

void UploadSessionStatus::setChunksUploaded(int32_t value)
{
    m_Chunks_uploaded = value;
    m_Chunks_uploadedIsSet = true;
}

bool UploadSessionStatus::chunksUploadedIsSet() const
{
    return m_Chunks_uploadedIsSet;
}

void UploadSessionStatus::unsetChunks_uploaded()
{
    m_Chunks_uploadedIsSet = false;
}
int32_t UploadSessionStatus::getChunksTotal() const
{
    return m_Chunks_total;
}

void UploadSessionStatus::setChunksTotal(int32_t value)
{
    m_Chunks_total = value;
    m_Chunks_totalIsSet = true;
}

bool UploadSessionStatus::chunksTotalIsSet() const
{
    return m_Chunks_totalIsSet;
}

void UploadSessionStatus::unsetChunks_total()
{
    m_Chunks_totalIsSet = false;
}
double UploadSessionStatus::getProgressPercent() const
{
    return m_Progress_percent;
}

void UploadSessionStatus::setProgressPercent(double value)
{
    m_Progress_percent = value;
    m_Progress_percentIsSet = true;
}

bool UploadSessionStatus::progressPercentIsSet() const
{
    return m_Progress_percentIsSet;
}

void UploadSessionStatus::unsetProgress_percent()
{
    m_Progress_percentIsSet = false;
}
utility::string_t UploadSessionStatus::getPlaylistId() const
{
    return m_Playlist_id;
}


void UploadSessionStatus::setPlaylistId(const utility::string_t& value)
{
    m_Playlist_id = value;
    m_Playlist_idIsSet = true;
}

bool UploadSessionStatus::playlistIdIsSet() const
{
    return m_Playlist_idIsSet;
}

void UploadSessionStatus::unsetPlaylist_id()
{
    m_Playlist_idIsSet = false;
}
utility::datetime UploadSessionStatus::getCreatedAt() const
{
    return m_Created_at;
}


void UploadSessionStatus::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool UploadSessionStatus::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void UploadSessionStatus::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
UploadSessionStatus::StatusEnum UploadSessionStatus::getStatus() const
{
    return m_Status;
}


void UploadSessionStatus::setStatus(const StatusEnum value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool UploadSessionStatus::statusIsSet() const
{
    return m_StatusIsSet;
}

void UploadSessionStatus::unsetStatus()
{
    m_StatusIsSet = false;
}

}
}
}
}


