/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/PlayerState.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PlayerState::PlayerState()
{
    m_Is_playing = false;
    m_Is_playingIsSet = false;
    m_Active_playlist_id = utility::conversions::to_string_t("");
    m_Active_playlist_idIsSet = false;
    m_Active_playlist_title = utility::conversions::to_string_t("");
    m_Active_playlist_titleIsSet = false;
    m_Active_track_id = utility::conversions::to_string_t("");
    m_Active_track_idIsSet = false;
    m_Active_trackIsSet = false;
    m_Active_track_number = 0;
    m_Active_track_numberIsSet = false;
    m_Active_track_title = utility::conversions::to_string_t("");
    m_Active_track_titleIsSet = false;
    m_Track_index = 0;
    m_Track_indexIsSet = false;
    m_Track_count = 0;
    m_Track_countIsSet = false;
    m_Position_ms = 0;
    m_Position_msIsSet = false;
    m_Duration_ms = 0;
    m_Duration_msIsSet = false;
    m_Can_prev = false;
    m_Can_prevIsSet = false;
    m_Can_next = false;
    m_Can_nextIsSet = false;
    m_Volume = 0;
    m_VolumeIsSet = false;
    m_Server_seq = 0.0;
    m_Server_seqIsSet = false;
}

PlayerState::~PlayerState()
{
}

void PlayerState::validate()
{
    // TODO: implement validation
}

web::json::value PlayerState::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Is_playingIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_playing"))] = ModelBase::toJson(m_Is_playing);
    }
    if(m_Active_playlist_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("active_playlist_id"))] = ModelBase::toJson(m_Active_playlist_id);
    }
    if(m_Active_playlist_titleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("active_playlist_title"))] = ModelBase::toJson(m_Active_playlist_title);
    }
    if(m_Active_track_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("active_track_id"))] = ModelBase::toJson(m_Active_track_id);
    }
    if(m_Active_trackIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("active_track"))] = ModelBase::toJson(m_Active_track);
    }
    if(m_Active_track_numberIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("active_track_number"))] = ModelBase::toJson(m_Active_track_number);
    }
    if(m_Active_track_titleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("active_track_title"))] = ModelBase::toJson(m_Active_track_title);
    }
    if(m_Track_indexIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("track_index"))] = ModelBase::toJson(m_Track_index);
    }
    if(m_Track_countIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("track_count"))] = ModelBase::toJson(m_Track_count);
    }
    if(m_Position_msIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("position_ms"))] = ModelBase::toJson(m_Position_ms);
    }
    if(m_Duration_msIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("duration_ms"))] = ModelBase::toJson(m_Duration_ms);
    }
    if(m_Can_prevIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("can_prev"))] = ModelBase::toJson(m_Can_prev);
    }
    if(m_Can_nextIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("can_next"))] = ModelBase::toJson(m_Can_next);
    }
    if(m_VolumeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume"))] = ModelBase::toJson(m_Volume);
    }
    if(m_Server_seqIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("server_seq"))] = ModelBase::toJson(m_Server_seq);
    }

    return val;
}

bool PlayerState::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_playing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_playing")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsPlaying;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsPlaying);
            setIsPlaying(refVal_setIsPlaying);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("active_playlist_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("active_playlist_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActivePlaylistId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActivePlaylistId);
            setActivePlaylistId(refVal_setActivePlaylistId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("active_playlist_title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("active_playlist_title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActivePlaylistTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActivePlaylistTitle);
            setActivePlaylistTitle(refVal_setActivePlaylistTitle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("active_track_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("active_track_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActiveTrackId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveTrackId);
            setActiveTrackId(refVal_setActiveTrackId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("active_track"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("active_track")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Track> refVal_setActiveTrack;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveTrack);
            setActiveTrack(refVal_setActiveTrack);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("active_track_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("active_track_number")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setActiveTrackNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveTrackNumber);
            setActiveTrackNumber(refVal_setActiveTrackNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("active_track_title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("active_track_title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActiveTrackTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveTrackTitle);
            setActiveTrackTitle(refVal_setActiveTrackTitle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("track_index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("track_index")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTrackIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrackIndex);
            setTrackIndex(refVal_setTrackIndex);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("track_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("track_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTrackCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrackCount);
            setTrackCount(refVal_setTrackCount);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("position_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("position_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPositionMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPositionMs);
            setPositionMs(refVal_setPositionMs);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("duration_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("duration_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDurationMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDurationMs);
            setDurationMs(refVal_setDurationMs);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("can_prev"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("can_prev")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCanPrev;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCanPrev);
            setCanPrev(refVal_setCanPrev);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("can_next"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("can_next")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCanNext;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCanNext);
            setCanNext(refVal_setCanNext);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume);
            setVolume(refVal_setVolume);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("server_seq")));
        if(!fieldValue.is_null())
        {
            double refVal_setServerSeq;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerSeq);
            setServerSeq(refVal_setServerSeq);
            
        }
    }
    return ok;
}

void PlayerState::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Is_playingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_playing")), m_Is_playing));
    }
    if(m_Active_playlist_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("active_playlist_id")), m_Active_playlist_id));
    }
    if(m_Active_playlist_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("active_playlist_title")), m_Active_playlist_title));
    }
    if(m_Active_track_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("active_track_id")), m_Active_track_id));
    }
    if(m_Active_trackIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("active_track")), m_Active_track));
    }
    if(m_Active_track_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("active_track_number")), m_Active_track_number));
    }
    if(m_Active_track_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("active_track_title")), m_Active_track_title));
    }
    if(m_Track_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("track_index")), m_Track_index));
    }
    if(m_Track_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("track_count")), m_Track_count));
    }
    if(m_Position_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("position_ms")), m_Position_ms));
    }
    if(m_Duration_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("duration_ms")), m_Duration_ms));
    }
    if(m_Can_prevIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("can_prev")), m_Can_prev));
    }
    if(m_Can_nextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("can_next")), m_Can_next));
    }
    if(m_VolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume")), m_Volume));
    }
    if(m_Server_seqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("server_seq")), m_Server_seq));
    }
}

bool PlayerState::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_playing"))))
    {
        bool refVal_setIsPlaying;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_playing"))), refVal_setIsPlaying );
        setIsPlaying(refVal_setIsPlaying);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("active_playlist_id"))))
    {
        utility::string_t refVal_setActivePlaylistId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("active_playlist_id"))), refVal_setActivePlaylistId );
        setActivePlaylistId(refVal_setActivePlaylistId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("active_playlist_title"))))
    {
        utility::string_t refVal_setActivePlaylistTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("active_playlist_title"))), refVal_setActivePlaylistTitle );
        setActivePlaylistTitle(refVal_setActivePlaylistTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("active_track_id"))))
    {
        utility::string_t refVal_setActiveTrackId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("active_track_id"))), refVal_setActiveTrackId );
        setActiveTrackId(refVal_setActiveTrackId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("active_track"))))
    {
        std::shared_ptr<Track> refVal_setActiveTrack;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("active_track"))), refVal_setActiveTrack );
        setActiveTrack(refVal_setActiveTrack);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("active_track_number"))))
    {
        int32_t refVal_setActiveTrackNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("active_track_number"))), refVal_setActiveTrackNumber );
        setActiveTrackNumber(refVal_setActiveTrackNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("active_track_title"))))
    {
        utility::string_t refVal_setActiveTrackTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("active_track_title"))), refVal_setActiveTrackTitle );
        setActiveTrackTitle(refVal_setActiveTrackTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("track_index"))))
    {
        int32_t refVal_setTrackIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("track_index"))), refVal_setTrackIndex );
        setTrackIndex(refVal_setTrackIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("track_count"))))
    {
        int32_t refVal_setTrackCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("track_count"))), refVal_setTrackCount );
        setTrackCount(refVal_setTrackCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("position_ms"))))
    {
        int32_t refVal_setPositionMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("position_ms"))), refVal_setPositionMs );
        setPositionMs(refVal_setPositionMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("duration_ms"))))
    {
        int32_t refVal_setDurationMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("duration_ms"))), refVal_setDurationMs );
        setDurationMs(refVal_setDurationMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("can_prev"))))
    {
        bool refVal_setCanPrev;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("can_prev"))), refVal_setCanPrev );
        setCanPrev(refVal_setCanPrev);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("can_next"))))
    {
        bool refVal_setCanNext;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("can_next"))), refVal_setCanNext );
        setCanNext(refVal_setCanNext);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume"))))
    {
        int32_t refVal_setVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume"))), refVal_setVolume );
        setVolume(refVal_setVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        double refVal_setServerSeq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))), refVal_setServerSeq );
        setServerSeq(refVal_setServerSeq);
    }
    return ok;
}


bool PlayerState::isIsPlaying() const
{
    return m_Is_playing;
}

void PlayerState::setIsPlaying(bool value)
{
    m_Is_playing = value;
    m_Is_playingIsSet = true;
}

bool PlayerState::isPlayingIsSet() const
{
    return m_Is_playingIsSet;
}

void PlayerState::unsetIs_playing()
{
    m_Is_playingIsSet = false;
}
utility::string_t PlayerState::getActivePlaylistId() const
{
    return m_Active_playlist_id;
}


void PlayerState::setActivePlaylistId(const utility::string_t& value)
{
    m_Active_playlist_id = value;
    m_Active_playlist_idIsSet = true;
}

bool PlayerState::activePlaylistIdIsSet() const
{
    return m_Active_playlist_idIsSet;
}

void PlayerState::unsetActive_playlist_id()
{
    m_Active_playlist_idIsSet = false;
}
utility::string_t PlayerState::getActivePlaylistTitle() const
{
    return m_Active_playlist_title;
}


void PlayerState::setActivePlaylistTitle(const utility::string_t& value)
{
    m_Active_playlist_title = value;
    m_Active_playlist_titleIsSet = true;
}

bool PlayerState::activePlaylistTitleIsSet() const
{
    return m_Active_playlist_titleIsSet;
}

void PlayerState::unsetActive_playlist_title()
{
    m_Active_playlist_titleIsSet = false;
}
utility::string_t PlayerState::getActiveTrackId() const
{
    return m_Active_track_id;
}


void PlayerState::setActiveTrackId(const utility::string_t& value)
{
    m_Active_track_id = value;
    m_Active_track_idIsSet = true;
}

bool PlayerState::activeTrackIdIsSet() const
{
    return m_Active_track_idIsSet;
}

void PlayerState::unsetActive_track_id()
{
    m_Active_track_idIsSet = false;
}
std::shared_ptr<Track> PlayerState::getActiveTrack() const
{
    return m_Active_track;
}


void PlayerState::setActiveTrack(const std::shared_ptr<Track>& value)
{
    m_Active_track = value;
    m_Active_trackIsSet = true;
}

bool PlayerState::activeTrackIsSet() const
{
    return m_Active_trackIsSet;
}

void PlayerState::unsetActive_track()
{
    m_Active_trackIsSet = false;
}
int32_t PlayerState::getActiveTrackNumber() const
{
    return m_Active_track_number;
}

void PlayerState::setActiveTrackNumber(int32_t value)
{
    m_Active_track_number = value;
    m_Active_track_numberIsSet = true;
}

bool PlayerState::activeTrackNumberIsSet() const
{
    return m_Active_track_numberIsSet;
}

void PlayerState::unsetActive_track_number()
{
    m_Active_track_numberIsSet = false;
}
utility::string_t PlayerState::getActiveTrackTitle() const
{
    return m_Active_track_title;
}


void PlayerState::setActiveTrackTitle(const utility::string_t& value)
{
    m_Active_track_title = value;
    m_Active_track_titleIsSet = true;
}

bool PlayerState::activeTrackTitleIsSet() const
{
    return m_Active_track_titleIsSet;
}

void PlayerState::unsetActive_track_title()
{
    m_Active_track_titleIsSet = false;
}
int32_t PlayerState::getTrackIndex() const
{
    return m_Track_index;
}

void PlayerState::setTrackIndex(int32_t value)
{
    m_Track_index = value;
    m_Track_indexIsSet = true;
}

bool PlayerState::trackIndexIsSet() const
{
    return m_Track_indexIsSet;
}

void PlayerState::unsetTrack_index()
{
    m_Track_indexIsSet = false;
}
int32_t PlayerState::getTrackCount() const
{
    return m_Track_count;
}

void PlayerState::setTrackCount(int32_t value)
{
    m_Track_count = value;
    m_Track_countIsSet = true;
}

bool PlayerState::trackCountIsSet() const
{
    return m_Track_countIsSet;
}

void PlayerState::unsetTrack_count()
{
    m_Track_countIsSet = false;
}
int32_t PlayerState::getPositionMs() const
{
    return m_Position_ms;
}

void PlayerState::setPositionMs(int32_t value)
{
    m_Position_ms = value;
    m_Position_msIsSet = true;
}

bool PlayerState::positionMsIsSet() const
{
    return m_Position_msIsSet;
}

void PlayerState::unsetPosition_ms()
{
    m_Position_msIsSet = false;
}
int32_t PlayerState::getDurationMs() const
{
    return m_Duration_ms;
}

void PlayerState::setDurationMs(int32_t value)
{
    m_Duration_ms = value;
    m_Duration_msIsSet = true;
}

bool PlayerState::durationMsIsSet() const
{
    return m_Duration_msIsSet;
}

void PlayerState::unsetDuration_ms()
{
    m_Duration_msIsSet = false;
}
bool PlayerState::isCanPrev() const
{
    return m_Can_prev;
}

void PlayerState::setCanPrev(bool value)
{
    m_Can_prev = value;
    m_Can_prevIsSet = true;
}

bool PlayerState::canPrevIsSet() const
{
    return m_Can_prevIsSet;
}

void PlayerState::unsetCan_prev()
{
    m_Can_prevIsSet = false;
}
bool PlayerState::isCanNext() const
{
    return m_Can_next;
}

void PlayerState::setCanNext(bool value)
{
    m_Can_next = value;
    m_Can_nextIsSet = true;
}

bool PlayerState::canNextIsSet() const
{
    return m_Can_nextIsSet;
}

void PlayerState::unsetCan_next()
{
    m_Can_nextIsSet = false;
}
int32_t PlayerState::getVolume() const
{
    return m_Volume;
}

void PlayerState::setVolume(int32_t value)
{
    m_Volume = value;
    m_VolumeIsSet = true;
}

bool PlayerState::volumeIsSet() const
{
    return m_VolumeIsSet;
}

void PlayerState::unsetVolume()
{
    m_VolumeIsSet = false;
}
double PlayerState::getServerSeq() const
{
    return m_Server_seq;
}

void PlayerState::setServerSeq(double value)
{
    m_Server_seq = value;
    m_Server_seqIsSet = true;
}

bool PlayerState::serverSeqIsSet() const
{
    return m_Server_seqIsSet;
}

void PlayerState::unsetServer_seq()
{
    m_Server_seqIsSet = false;
}

}
}
}
}


