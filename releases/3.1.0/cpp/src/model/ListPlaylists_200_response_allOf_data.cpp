/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/ListPlaylists_200_response_allOf_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ListPlaylists_200_response_allOf_data::ListPlaylists_200_response_allOf_data()
{
    m_PlaylistsIsSet = false;
    m_Page = 0;
    m_PageIsSet = false;
    m_Limit = 0;
    m_LimitIsSet = false;
    m_Total = 0;
    m_TotalIsSet = false;
    m_Total_pages = 0;
    m_Total_pagesIsSet = false;
}

ListPlaylists_200_response_allOf_data::~ListPlaylists_200_response_allOf_data()
{
}

void ListPlaylists_200_response_allOf_data::validate()
{
    // TODO: implement validation
}

web::json::value ListPlaylists_200_response_allOf_data::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_PlaylistsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("playlists"))] = ModelBase::toJson(m_Playlists);
    }
    if(m_PageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("page"))] = ModelBase::toJson(m_Page);
    }
    if(m_LimitIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("limit"))] = ModelBase::toJson(m_Limit);
    }
    if(m_TotalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("total"))] = ModelBase::toJson(m_Total);
    }
    if(m_Total_pagesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("total_pages"))] = ModelBase::toJson(m_Total_pages);
    }

    return val;
}

bool ListPlaylists_200_response_allOf_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("playlists"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("playlists")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PlaylistSummary>> refVal_setPlaylists;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlaylists);
            setPlaylists(refVal_setPlaylists);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("page"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("page")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPage);
            setPage(refVal_setPage);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimit);
            setLimit(refVal_setLimit);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("total")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("total_pages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("total_pages")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalPages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalPages);
            setTotalPages(refVal_setTotalPages);
            
        }
    }
    return ok;
}

void ListPlaylists_200_response_allOf_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_PlaylistsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("playlists")), m_Playlists));
    }
    if(m_PageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("page")), m_Page));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("limit")), m_Limit));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("total")), m_Total));
    }
    if(m_Total_pagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("total_pages")), m_Total_pages));
    }
}

bool ListPlaylists_200_response_allOf_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("playlists"))))
    {
        std::vector<std::shared_ptr<PlaylistSummary>> refVal_setPlaylists;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("playlists"))), refVal_setPlaylists );
        setPlaylists(refVal_setPlaylists);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("page"))))
    {
        int32_t refVal_setPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("page"))), refVal_setPage );
        setPage(refVal_setPage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("limit"))))
    {
        int32_t refVal_setLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("limit"))), refVal_setLimit );
        setLimit(refVal_setLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("total"))))
    {
        int32_t refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("total_pages"))))
    {
        int32_t refVal_setTotalPages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("total_pages"))), refVal_setTotalPages );
        setTotalPages(refVal_setTotalPages);
    }
    return ok;
}


std::vector<std::shared_ptr<PlaylistSummary>> ListPlaylists_200_response_allOf_data::getPlaylists() const
{
    return m_Playlists;
}


void ListPlaylists_200_response_allOf_data::setPlaylists(const std::vector<std::shared_ptr<PlaylistSummary>>& value)
{
    m_Playlists = value;
    m_PlaylistsIsSet = true;
}

bool ListPlaylists_200_response_allOf_data::playlistsIsSet() const
{
    return m_PlaylistsIsSet;
}

void ListPlaylists_200_response_allOf_data::unsetPlaylists()
{
    m_PlaylistsIsSet = false;
}
int32_t ListPlaylists_200_response_allOf_data::getPage() const
{
    return m_Page;
}

void ListPlaylists_200_response_allOf_data::setPage(int32_t value)
{
    m_Page = value;
    m_PageIsSet = true;
}

bool ListPlaylists_200_response_allOf_data::pageIsSet() const
{
    return m_PageIsSet;
}

void ListPlaylists_200_response_allOf_data::unsetPage()
{
    m_PageIsSet = false;
}
int32_t ListPlaylists_200_response_allOf_data::getLimit() const
{
    return m_Limit;
}

void ListPlaylists_200_response_allOf_data::setLimit(int32_t value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool ListPlaylists_200_response_allOf_data::limitIsSet() const
{
    return m_LimitIsSet;
}

void ListPlaylists_200_response_allOf_data::unsetLimit()
{
    m_LimitIsSet = false;
}
int32_t ListPlaylists_200_response_allOf_data::getTotal() const
{
    return m_Total;
}

void ListPlaylists_200_response_allOf_data::setTotal(int32_t value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool ListPlaylists_200_response_allOf_data::totalIsSet() const
{
    return m_TotalIsSet;
}

void ListPlaylists_200_response_allOf_data::unsetTotal()
{
    m_TotalIsSet = false;
}
int32_t ListPlaylists_200_response_allOf_data::getTotalPages() const
{
    return m_Total_pages;
}

void ListPlaylists_200_response_allOf_data::setTotalPages(int32_t value)
{
    m_Total_pages = value;
    m_Total_pagesIsSet = true;
}

bool ListPlaylists_200_response_allOf_data::totalPagesIsSet() const
{
    return m_Total_pagesIsSet;
}

void ListPlaylists_200_response_allOf_data::unsetTotal_pages()
{
    m_Total_pagesIsSet = false;
}

}
}
}
}


