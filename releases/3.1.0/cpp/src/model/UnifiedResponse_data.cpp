/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/UnifiedResponse_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

void UnifiedResponse_data::validate()
{
    // TODO: implement validation
}

const UnifiedResponse_data::VariantType& UnifiedResponse_data::getVariant() const
{
    return m_variantValue;
}

void UnifiedResponse_data::setVariant(UnifiedResponse_data::VariantType value)
{
    m_variantValue = value;
}

web::json::value UnifiedResponse_data::toJson() const
{
    web::json::value val = web::json::value::object();

    std::visit([&](auto&& arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (std::is_same_v<T, std::monostate>) {
            val = web::json::value::null();
        } else {
            val = arg.toJson();
        }
    }, m_variantValue);

    return val;
}

void UnifiedResponse_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    std::visit([&](auto&& arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (!std::is_same_v<T, std::monostate>) {
          arg.toMultipart(multipart, prefix);
        }
    }, m_variantValue);
}

template bool UnifiedResponse_data::fromJson<std::shared_ptr&lt;Object&gt;>(const web::json::value& json);
template bool UnifiedResponse_data::fromMultiPart<std::shared_ptr&lt;Object&gt;>(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix);
template bool UnifiedResponse_data::fromJson<std::vector&lt;std::shared_ptr&lt;AnyType&gt;&gt;>(const web::json::value& json);
template bool UnifiedResponse_data::fromMultiPart<std::vector&lt;std::shared_ptr&lt;AnyType&gt;&gt;>(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix);

}
}
}
}


