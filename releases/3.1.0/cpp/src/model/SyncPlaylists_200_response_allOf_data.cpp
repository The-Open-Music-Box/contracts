/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/SyncPlaylists_200_response_allOf_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SyncPlaylists_200_response_allOf_data::SyncPlaylists_200_response_allOf_data()
{
    m_PlaylistsIsSet = false;
    m_Server_seq = 0.0;
    m_Server_seqIsSet = false;
}

SyncPlaylists_200_response_allOf_data::~SyncPlaylists_200_response_allOf_data()
{
}

void SyncPlaylists_200_response_allOf_data::validate()
{
    // TODO: implement validation
}

web::json::value SyncPlaylists_200_response_allOf_data::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_PlaylistsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("playlists"))] = ModelBase::toJson(m_Playlists);
    }
    if(m_Server_seqIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("server_seq"))] = ModelBase::toJson(m_Server_seq);
    }

    return val;
}

bool SyncPlaylists_200_response_allOf_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("playlists"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("playlists")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PlaylistDetailed>> refVal_setPlaylists;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlaylists);
            setPlaylists(refVal_setPlaylists);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("server_seq")));
        if(!fieldValue.is_null())
        {
            double refVal_setServerSeq;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerSeq);
            setServerSeq(refVal_setServerSeq);
            
        }
    }
    return ok;
}

void SyncPlaylists_200_response_allOf_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_PlaylistsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("playlists")), m_Playlists));
    }
    if(m_Server_seqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("server_seq")), m_Server_seq));
    }
}

bool SyncPlaylists_200_response_allOf_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("playlists"))))
    {
        std::vector<std::shared_ptr<PlaylistDetailed>> refVal_setPlaylists;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("playlists"))), refVal_setPlaylists );
        setPlaylists(refVal_setPlaylists);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))))
    {
        double refVal_setServerSeq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("server_seq"))), refVal_setServerSeq );
        setServerSeq(refVal_setServerSeq);
    }
    return ok;
}


std::vector<std::shared_ptr<PlaylistDetailed>> SyncPlaylists_200_response_allOf_data::getPlaylists() const
{
    return m_Playlists;
}


void SyncPlaylists_200_response_allOf_data::setPlaylists(const std::vector<std::shared_ptr<PlaylistDetailed>>& value)
{
    m_Playlists = value;
    m_PlaylistsIsSet = true;
}

bool SyncPlaylists_200_response_allOf_data::playlistsIsSet() const
{
    return m_PlaylistsIsSet;
}

void SyncPlaylists_200_response_allOf_data::unsetPlaylists()
{
    m_PlaylistsIsSet = false;
}
double SyncPlaylists_200_response_allOf_data::getServerSeq() const
{
    return m_Server_seq;
}

void SyncPlaylists_200_response_allOf_data::setServerSeq(double value)
{
    m_Server_seq = value;
    m_Server_seqIsSet = true;
}

bool SyncPlaylists_200_response_allOf_data::serverSeqIsSet() const
{
    return m_Server_seqIsSet;
}

void SyncPlaylists_200_response_allOf_data::unsetServer_seq()
{
    m_Server_seqIsSet = false;
}

}
}
}
}


