/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TombContracts/model/MoveTrack_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

MoveTrack_request::MoveTrack_request()
{
    m_Source_playlist_id = utility::conversions::to_string_t("");
    m_Source_playlist_idIsSet = false;
    m_Target_playlist_id = utility::conversions::to_string_t("");
    m_Target_playlist_idIsSet = false;
    m_Track_id = utility::conversions::to_string_t("");
    m_Track_idIsSet = false;
    m_Target_position = 0;
    m_Target_positionIsSet = false;
    m_Client_op_id = utility::conversions::to_string_t("");
    m_Client_op_idIsSet = false;
}

MoveTrack_request::~MoveTrack_request()
{
}

void MoveTrack_request::validate()
{
    // TODO: implement validation
}

web::json::value MoveTrack_request::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Source_playlist_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("source_playlist_id"))] = ModelBase::toJson(m_Source_playlist_id);
    }
    if(m_Target_playlist_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("target_playlist_id"))] = ModelBase::toJson(m_Target_playlist_id);
    }
    if(m_Track_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("track_id"))] = ModelBase::toJson(m_Track_id);
    }
    if(m_Target_positionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("target_position"))] = ModelBase::toJson(m_Target_position);
    }
    if(m_Client_op_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("client_op_id"))] = ModelBase::toJson(m_Client_op_id);
    }

    return val;
}

bool MoveTrack_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("source_playlist_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("source_playlist_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSourcePlaylistId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSourcePlaylistId);
            setSourcePlaylistId(refVal_setSourcePlaylistId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("target_playlist_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("target_playlist_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTargetPlaylistId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetPlaylistId);
            setTargetPlaylistId(refVal_setTargetPlaylistId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("track_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("track_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTrackId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrackId);
            setTrackId(refVal_setTrackId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("target_position"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("target_position")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTargetPosition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetPosition);
            setTargetPosition(refVal_setTargetPosition);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("client_op_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientOpId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientOpId);
            setClientOpId(refVal_setClientOpId);
            
        }
    }
    return ok;
}

void MoveTrack_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Source_playlist_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("source_playlist_id")), m_Source_playlist_id));
    }
    if(m_Target_playlist_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("target_playlist_id")), m_Target_playlist_id));
    }
    if(m_Track_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("track_id")), m_Track_id));
    }
    if(m_Target_positionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("target_position")), m_Target_position));
    }
    if(m_Client_op_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("client_op_id")), m_Client_op_id));
    }
}

bool MoveTrack_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("source_playlist_id"))))
    {
        utility::string_t refVal_setSourcePlaylistId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("source_playlist_id"))), refVal_setSourcePlaylistId );
        setSourcePlaylistId(refVal_setSourcePlaylistId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("target_playlist_id"))))
    {
        utility::string_t refVal_setTargetPlaylistId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("target_playlist_id"))), refVal_setTargetPlaylistId );
        setTargetPlaylistId(refVal_setTargetPlaylistId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("track_id"))))
    {
        utility::string_t refVal_setTrackId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("track_id"))), refVal_setTrackId );
        setTrackId(refVal_setTrackId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("target_position"))))
    {
        int32_t refVal_setTargetPosition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("target_position"))), refVal_setTargetPosition );
        setTargetPosition(refVal_setTargetPosition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))))
    {
        utility::string_t refVal_setClientOpId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("client_op_id"))), refVal_setClientOpId );
        setClientOpId(refVal_setClientOpId);
    }
    return ok;
}


utility::string_t MoveTrack_request::getSourcePlaylistId() const
{
    return m_Source_playlist_id;
}


void MoveTrack_request::setSourcePlaylistId(const utility::string_t& value)
{
    m_Source_playlist_id = value;
    m_Source_playlist_idIsSet = true;
}

bool MoveTrack_request::sourcePlaylistIdIsSet() const
{
    return m_Source_playlist_idIsSet;
}

void MoveTrack_request::unsetSource_playlist_id()
{
    m_Source_playlist_idIsSet = false;
}
utility::string_t MoveTrack_request::getTargetPlaylistId() const
{
    return m_Target_playlist_id;
}


void MoveTrack_request::setTargetPlaylistId(const utility::string_t& value)
{
    m_Target_playlist_id = value;
    m_Target_playlist_idIsSet = true;
}

bool MoveTrack_request::targetPlaylistIdIsSet() const
{
    return m_Target_playlist_idIsSet;
}

void MoveTrack_request::unsetTarget_playlist_id()
{
    m_Target_playlist_idIsSet = false;
}
utility::string_t MoveTrack_request::getTrackId() const
{
    return m_Track_id;
}


void MoveTrack_request::setTrackId(const utility::string_t& value)
{
    m_Track_id = value;
    m_Track_idIsSet = true;
}

bool MoveTrack_request::trackIdIsSet() const
{
    return m_Track_idIsSet;
}

void MoveTrack_request::unsetTrack_id()
{
    m_Track_idIsSet = false;
}
int32_t MoveTrack_request::getTargetPosition() const
{
    return m_Target_position;
}

void MoveTrack_request::setTargetPosition(int32_t value)
{
    m_Target_position = value;
    m_Target_positionIsSet = true;
}

bool MoveTrack_request::targetPositionIsSet() const
{
    return m_Target_positionIsSet;
}

void MoveTrack_request::unsetTarget_position()
{
    m_Target_positionIsSet = false;
}
utility::string_t MoveTrack_request::getClientOpId() const
{
    return m_Client_op_id;
}


void MoveTrack_request::setClientOpId(const utility::string_t& value)
{
    m_Client_op_id = value;
    m_Client_op_idIsSet = true;
}

bool MoveTrack_request::clientOpIdIsSet() const
{
    return m_Client_op_idIsSet;
}

void MoveTrack_request::unsetClient_op_id()
{
    m_Client_op_idIsSet = false;
}

}
}
}
}


