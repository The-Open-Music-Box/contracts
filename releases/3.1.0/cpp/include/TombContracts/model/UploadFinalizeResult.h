/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UploadFinalizeResult.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UploadFinalizeResult_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UploadFinalizeResult_H_

#include <stdexcept>

#include "TombContracts/ModelBase.h"

#include "TombContracts/model/Track.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Track;


class TOMB_API UploadFinalizeResult
    : public ModelBase
{
public:
    UploadFinalizeResult();
    virtual ~UploadFinalizeResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// UploadFinalizeResult members

    enum class StatusEnum
    {
        SUCCESS,
        ERROR,
    };

    StatusEnum toStatusEnum(const utility::string_t& value) const;
    const utility::string_t fromStatusEnum(const StatusEnum value) const;


    StatusEnum getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();
    void setStatus(const StatusEnum value);

    utility::string_t getMessage() const;
    bool messageIsSet() const;
    void unsetMessage();
    void setMessage(const utility::string_t& value);

    std::shared_ptr<Track> getTrack() const;
    bool trackIsSet() const;
    void unsetTrack();
    void setTrack(const std::shared_ptr<Track>& value);


protected:
    StatusEnum m_Status;
    bool m_StatusIsSet;

    utility::string_t m_Message;
    bool m_MessageIsSet;

    std::shared_ptr<Track> m_Track;
    bool m_TrackIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UploadFinalizeResult_H_ */
