/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SetVolume_200_response.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SetVolume_200_response_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SetVolume_200_response_H_

#include <stdexcept>

#include "TombContracts/ModelBase.h"

#include "TombContracts/AnyType.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include "TombContracts/model/SetVolume_200_response_allOf_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class SetVolume_200_response_allOf_data;


class TOMB_API SetVolume_200_response
    : public ModelBase
{
public:
    SetVolume_200_response();
    virtual ~SetVolume_200_response();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// SetVolume_200_response members

    enum class StatusEnum
    {
        SUCCESS,
        ERROR,
    };
    enum class Error_typeEnum
    {
        VALIDATION_ERROR,
        NOT_FOUND,
        RATE_LIMIT_EXCEEDED,
        SERVICE_UNAVAILABLE,
        INTERNAL_ERROR,
        CONFLICT,
        BAD_REQUEST,
    };

    StatusEnum toStatusEnum(const utility::string_t& value) const;
    const utility::string_t fromStatusEnum(const StatusEnum value) const;


    Error_typeEnum toError_typeEnum(const utility::string_t& value) const;
    const utility::string_t fromError_typeEnum(const Error_typeEnum value) const;


    StatusEnum getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();
    void setStatus(const StatusEnum value);

    utility::string_t getMessage() const;
    bool messageIsSet() const;
    void unsetMessage();
    void setMessage(const utility::string_t& value);

    std::shared_ptr<SetVolume_200_response_allOf_data> getData() const;
    bool dataIsSet() const;
    void unsetData();
    void setData(const std::shared_ptr<SetVolume_200_response_allOf_data>& value);

    /// <summary>
    /// Client operation ID for operation tracking
    /// </summary>
    utility::string_t getClientOpId() const;
    bool clientOpIdIsSet() const;
    void unsetClient_op_id();
    void setClientOpId(const utility::string_t& value);

    /// <summary>
    /// Server sequence number for state synchronization
    /// </summary>
    double getServerSeq() const;
    bool serverSeqIsSet() const;
    void unsetServer_seq();
    void setServerSeq(double value);

    /// <summary>
    /// Unix timestamp in seconds
    /// </summary>
    double getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(double value);

    utility::string_t getRequestId() const;
    bool requestIdIsSet() const;
    void unsetRequest_id();
    void setRequestId(const utility::string_t& value);

    Error_typeEnum getErrorType() const;
    bool errorTypeIsSet() const;
    void unsetError_type();
    void setErrorType(const Error_typeEnum value);

    std::map<utility::string_t, std::shared_ptr<AnyType>> getDetails() const;
    bool detailsIsSet() const;
    void unsetDetails();
    void setDetails(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value);


protected:
    StatusEnum m_Status;
    bool m_StatusIsSet;

    utility::string_t m_Message;
    bool m_MessageIsSet;

    std::shared_ptr<SetVolume_200_response_allOf_data> m_Data;
    bool m_DataIsSet;

    utility::string_t m_Client_op_id;
    bool m_Client_op_idIsSet;

    double m_Server_seq;
    bool m_Server_seqIsSet;

    double m_Timestamp;
    bool m_TimestampIsSet;

    utility::string_t m_Request_id;
    bool m_Request_idIsSet;

    Error_typeEnum m_Error_type;
    bool m_Error_typeIsSet;

    std::map<utility::string_t, std::shared_ptr<AnyType>> m_Details;
    bool m_DetailsIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SetVolume_200_response_H_ */
