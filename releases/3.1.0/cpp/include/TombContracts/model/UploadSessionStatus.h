/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UploadSessionStatus.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UploadSessionStatus_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UploadSessionStatus_H_

#include <stdexcept>

#include "TombContracts/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class TOMB_API UploadSessionStatus
    : public ModelBase
{
public:
    UploadSessionStatus();
    virtual ~UploadSessionStatus();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// UploadSessionStatus members

    enum class StatusEnum
    {
        PENDING,
        UPLOADING,
        COMPLETED,
        ERROR,
    };

    StatusEnum toStatusEnum(const utility::string_t& value) const;
    const utility::string_t fromStatusEnum(const StatusEnum value) const;


    utility::string_t getSessionId() const;
    bool sessionIdIsSet() const;
    void unsetSession_id();
    void setSessionId(const utility::string_t& value);

    utility::string_t getFilename() const;
    bool filenameIsSet() const;
    void unsetFilename();
    void setFilename(const utility::string_t& value);

    int32_t getFileSize() const;
    bool fileSizeIsSet() const;
    void unsetFile_size();
    void setFileSize(int32_t value);

    int32_t getChunksUploaded() const;
    bool chunksUploadedIsSet() const;
    void unsetChunks_uploaded();
    void setChunksUploaded(int32_t value);

    int32_t getChunksTotal() const;
    bool chunksTotalIsSet() const;
    void unsetChunks_total();
    void setChunksTotal(int32_t value);

    double getProgressPercent() const;
    bool progressPercentIsSet() const;
    void unsetProgress_percent();
    void setProgressPercent(double value);

    utility::string_t getPlaylistId() const;
    bool playlistIdIsSet() const;
    void unsetPlaylist_id();
    void setPlaylistId(const utility::string_t& value);

    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();
    void setCreatedAt(const utility::datetime& value);

    StatusEnum getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();
    void setStatus(const StatusEnum value);


protected:
    utility::string_t m_Session_id;
    bool m_Session_idIsSet;

    utility::string_t m_Filename;
    bool m_FilenameIsSet;

    int32_t m_File_size;
    bool m_File_sizeIsSet;

    int32_t m_Chunks_uploaded;
    bool m_Chunks_uploadedIsSet;

    int32_t m_Chunks_total;
    bool m_Chunks_totalIsSet;

    double m_Progress_percent;
    bool m_Progress_percentIsSet;

    utility::string_t m_Playlist_id;
    bool m_Playlist_idIsSet;

    utility::datetime m_Created_at;
    bool m_Created_atIsSet;

    StatusEnum m_Status;
    bool m_StatusIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UploadSessionStatus_H_ */
