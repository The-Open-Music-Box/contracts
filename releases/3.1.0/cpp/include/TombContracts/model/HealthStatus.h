/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HealthStatus.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_HealthStatus_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_HealthStatus_H_

#include <stdexcept>

#include "TombContracts/ModelBase.h"

#include "TombContracts/model/HealthStatus_services.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class HealthStatus_services;


class TOMB_API HealthStatus
    : public ModelBase
{
public:
    HealthStatus();
    virtual ~HealthStatus();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// HealthStatus members

    enum class StatusEnum
    {
        HEALTHY,
        DEGRADED,
        UNHEALTHY,
    };

    StatusEnum toStatusEnum(const utility::string_t& value) const;
    const utility::string_t fromStatusEnum(const StatusEnum value) const;


    StatusEnum getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();
    void setStatus(const StatusEnum value);

    std::shared_ptr<HealthStatus_services> getServices() const;
    bool servicesIsSet() const;
    void unsetServices();
    void setServices(const std::shared_ptr<HealthStatus_services>& value);

    double getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(double value);

    /// <summary>
    /// Server sequence number for state synchronization
    /// </summary>
    double getServerSeq() const;
    bool serverSeqIsSet() const;
    void unsetServer_seq();
    void setServerSeq(double value);


protected:
    StatusEnum m_Status;
    bool m_StatusIsSet;

    std::shared_ptr<HealthStatus_services> m_Services;
    bool m_ServicesIsSet;

    double m_Timestamp;
    bool m_TimestampIsSet;

    double m_Server_seq;
    bool m_Server_seqIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_HealthStatus_H_ */
