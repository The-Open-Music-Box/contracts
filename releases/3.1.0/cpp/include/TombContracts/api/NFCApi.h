/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NFCApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_NFCApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_NFCApi_H_



#include "TombContracts/ApiClient.h"

#include "TombContracts/model/AssociateNFC_200_response.h"
#include "TombContracts/model/AssociateNFC_request.h"
#include "TombContracts/model/GetNFCStatus_200_response.h"
#include "TombContracts/model/PlayerPlay_request.h"
#include "TombContracts/model/ScanNFC_200_response.h"
#include "TombContracts/model/ScanNFC_request.h"
#include "TombContracts/model/UnifiedResponse.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class TOMB_API NFCApi 
{
public:

    explicit NFCApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~NFCApi();

    /// <summary>
    /// Associate NFC tag with playlist
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="associateNFCRequest"></param>
    pplx::task<std::shared_ptr<AssociateNFC_200_response>> associateNFC(
        std::shared_ptr<AssociateNFC_request> associateNFCRequest
    ) const;
    /// <summary>
    /// Get NFC reader status
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetNFCStatus_200_response>> getNFCStatus(
    ) const;
    /// <summary>
    /// Remove NFC tag association
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="tagId"></param>
    /// <param name="playerPlayRequest"> (optional)</param>
    pplx::task<std::shared_ptr<UnifiedResponse>> removeNFCAssociation(
        utility::string_t tagId,
        boost::optional<std::shared_ptr<PlayerPlay_request>> playerPlayRequest
    ) const;
    /// <summary>
    /// Initiate NFC tag scan
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="scanNFCRequest"> (optional)</param>
    pplx::task<std::shared_ptr<ScanNFC_200_response>> scanNFC(
        boost::optional<std::shared_ptr<ScanNFC_request>> scanNFCRequest
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_NFCApi_H_ */

