/**
 * TheOpenMusicBox API
 * Complete API contract definitions for TheOpenMusicBox - A Raspberry Pi-based music player system.  All API responses follow the UnifiedResponseService format with standardized envelopes. This specification is the source of truth for all client implementations (Web, Flutter, C++). 
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PlayerApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_PlayerApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_PlayerApi_H_



#include "TombContracts/ApiClient.h"

#include "TombContracts/model/PlayerPlay_200_response.h"
#include "TombContracts/model/PlayerPlay_request.h"
#include "TombContracts/model/PlayerSeek_request.h"
#include "TombContracts/model/SetVolume_200_response.h"
#include "TombContracts/model/SetVolume_request.h"
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class TOMB_API PlayerApi 
{
public:

    explicit PlayerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~PlayerApi();

    /// <summary>
    /// Get current player status
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<PlayerPlay_200_response>> getPlayerStatus(
    ) const;
    /// <summary>
    /// Skip to next track
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playerPlayRequest"> (optional)</param>
    pplx::task<std::shared_ptr<PlayerPlay_200_response>> playerNext(
        boost::optional<std::shared_ptr<PlayerPlay_request>> playerPlayRequest
    ) const;
    /// <summary>
    /// Pause playback
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playerPlayRequest"> (optional)</param>
    pplx::task<std::shared_ptr<PlayerPlay_200_response>> playerPause(
        boost::optional<std::shared_ptr<PlayerPlay_request>> playerPlayRequest
    ) const;
    /// <summary>
    /// Start/resume playback
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playerPlayRequest"> (optional)</param>
    pplx::task<std::shared_ptr<PlayerPlay_200_response>> playerPlay(
        boost::optional<std::shared_ptr<PlayerPlay_request>> playerPlayRequest
    ) const;
    /// <summary>
    /// Skip to previous track
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playerPlayRequest"> (optional)</param>
    pplx::task<std::shared_ptr<PlayerPlay_200_response>> playerPrevious(
        boost::optional<std::shared_ptr<PlayerPlay_request>> playerPlayRequest
    ) const;
    /// <summary>
    /// Seek to position in current track
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playerSeekRequest"></param>
    pplx::task<std::shared_ptr<PlayerPlay_200_response>> playerSeek(
        std::shared_ptr<PlayerSeek_request> playerSeekRequest
    ) const;
    /// <summary>
    /// Stop playback
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playerPlayRequest"> (optional)</param>
    pplx::task<std::shared_ptr<PlayerPlay_200_response>> playerStop(
        boost::optional<std::shared_ptr<PlayerPlay_request>> playerPlayRequest
    ) const;
    /// <summary>
    /// Toggle play/pause
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="playerPlayRequest"> (optional)</param>
    pplx::task<std::shared_ptr<PlayerPlay_200_response>> playerToggle(
        boost::optional<std::shared_ptr<PlayerPlay_request>> playerPlayRequest
    ) const;
    /// <summary>
    /// Set volume level
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="setVolumeRequest"></param>
    pplx::task<std::shared_ptr<SetVolume_200_response>> setVolume(
        std::shared_ptr<SetVolume_request> setVolumeRequest
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_PlayerApi_H_ */

